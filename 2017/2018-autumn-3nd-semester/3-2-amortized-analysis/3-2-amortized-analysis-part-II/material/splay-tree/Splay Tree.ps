%!PS-Adobe-2.0
%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
%%Title: dzhang-splaytrees.dvi
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMBX10 CMR10 CMBX12 CMMI10 CMSL10 CMSY10 CMTI10 CMEX10
%%+ CMMI7 CMSY7 CMR7
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -tletter -o dzhang-splaytrees.ps
%+ dzhang-splaytrees.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2005.09.14:0031
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: f7b6d320.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmb10 cmbx10 cmbx12 cmbx5 cmbx6 cmbx7 cmbx8 cmbx9 cmbxsl10
%     cmdunh10 cmr10 cmr12 cmr17cmr6 cmr7 cmr8 cmr9 cmsl10 cmsl12 cmsl8
%     cmsl9 cmss10cmss12 cmss17 cmss8 cmss9 cmssbx10 cmssdc10 cmssi10
%     cmssi12 cmssi17 cmssi8cmssi9 cmssq8 cmssqi8 cmvtt10
%
/TeXf7b6d320Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute /caron /breve
/macron /ring /cedilla /germandbls /ae /oe /oslash /AE /OE /Oslash
/suppress /exclam /quotedblright /numbersign /dollar /percent /ampersand
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen
/period /slash /zero /one /two /three /four /five /six /seven /eight
/nine /colon /semicolon /exclamdown /equal /questiondown /question /at
/A /B /C /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X
/Y /Z /bracketleft /quotedblleft /bracketright /circumflex /dotaccent
/quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u
/v /w /x /y /z /endash /emdash /hungarumlaut /tilde /dieresis /suppress
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /space
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /.notdef
/.notdef /Omega /ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute
/caron /breve /macron /ring /cedilla /germandbls /ae /oe /oslash /AE
/OE /Oslash /suppress /dieresis /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: aae443f0.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmmi10 cmmi12 cmmi5 cmmi6 cmmi7 cmmi8 cmmi9 cmmib10
%
/TeXaae443f0Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/alpha /beta /gamma /delta /epsilon1 /zeta /eta /theta /iota /kappa
/lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon /phi /chi /psi
/omega /epsilon /theta1 /pi1 /rho1 /sigma1 /phi1 /arrowlefttophalf
/arrowleftbothalf /arrowrighttophalf /arrowrightbothalf /arrowhookleft
/arrowhookright /triangleright /triangleleft /zerooldstyle /oneoldstyle
/twooldstyle /threeoldstyle /fouroldstyle /fiveoldstyle /sixoldstyle
/sevenoldstyle /eightoldstyle /nineoldstyle /period /comma /less /slash
/greater /star /partialdiff /A /B /C /D /E /F /G /H /I /J /K /L /M /N
/O /P /Q /R /S /T /U /V /W /X /Y /Z /flat /natural /sharp /slurbelow
/slurabove /lscript /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p
/q /r /s /t /u /v /w /x /y /z /dotlessi /dotlessj /weierstrass /vector
/tie /psi /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi
/.notdef /.notdef /Omega /alpha /beta /gamma /delta /epsilon1 /zeta /eta
/theta /iota /kappa /lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon
/phi /chi /psi /tie /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: bbad153f.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmsy10 cmsy5 cmsy6 cmsy7 cmsy8 cmsy9
%
/TeXbbad153fEncoding [
/minus /periodcentered /multiply /asteriskmath /divide /diamondmath
/plusminus /minusplus /circleplus /circleminus /circlemultiply
/circledivide /circledot /circlecopyrt /openbullet /bullet
/equivasymptotic /equivalence /reflexsubset /reflexsuperset /lessequal
/greaterequal /precedesequal /followsequal /similar /approxequal
/propersubset /propersuperset /lessmuch /greatermuch /precedes /follows
/arrowleft /arrowright /arrowup /arrowdown /arrowboth /arrownortheast
/arrowsoutheast /similarequal /arrowdblleft /arrowdblright /arrowdblup
/arrowdbldown /arrowdblboth /arrownorthwest /arrowsouthwest /proportional
/prime /infinity /element /owner /triangle /triangleinv /negationslash
/mapsto /universal /existential /logicalnot /emptyset /Rfractur /Ifractur
/latticetop /perpendicular /aleph /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /union /intersection
/unionmulti /logicaland /logicalor /turnstileleft /turnstileright
/floorleft /floorright /ceilingleft /ceilingright /braceleft /braceright
/angbracketleft /angbracketright /bar /bardbl /arrowbothv /arrowdblbothv
/backslash /wreathproduct /radical /coproduct /nabla /integral
/unionsq /intersectionsq /subsetsqequal /supersetsqequal /section
/dagger /daggerdbl /paragraph /club /diamond /heart /spade /arrowleft
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/minus /periodcentered /multiply /asteriskmath /divide /diamondmath
/plusminus /minusplus /circleplus /circleminus /.notdef /.notdef
/circlemultiply /circledivide /circledot /circlecopyrt /openbullet
/bullet /equivasymptotic /equivalence /reflexsubset /reflexsuperset
/lessequal /greaterequal /precedesequal /followsequal /similar
/approxequal /propersubset /propersuperset /lessmuch /greatermuch
/precedes /follows /arrowleft /spade /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: 74afc74c.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmbxti10 cmff10 cmfi10 cmfib8 cmti10 cmti12 cmti7 cmti8cmti9 cmu10
%
/TeX74afc74cEncoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute /caron /breve
/macron /ring /cedilla /germandbls /ae /oe /oslash /AE /OE /Oslash
/suppress /exclam /quotedblright /numbersign /sterling /percent
/ampersand /quoteright /parenleft /parenright /asterisk /plus /comma
/hyphen /period /slash /zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /exclamdown /equal /questiondown /question
/at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /quotedblleft /bracketright /circumflex /dotaccent
/quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u
/v /w /x /y /z /endash /emdash /hungarumlaut /tilde /dieresis /suppress
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /space
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /.notdef
/.notdef /Omega /ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute
/caron /breve /macron /ring /cedilla /germandbls /ae /oe /oslash /AE
/OE /Oslash /suppress /dieresis /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMR7
%!PS-AdobeFont-1.1: CMR7 1.0
%%CreationDate: 1991 Aug 20 16:39:21
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-27 -250 1122 750}readonly def
/UniqueID 5000790 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CABB9FFC6CC3F1E9AE32F234EB60FE7D
E34995B1ACFF52428EA20C8ED4FD73E3935CEBD40E0EAD70C0887A451E1B1AC8
47AEDE4191CCDB8B61345FD070FD30C4F375D8418DDD454729A251B3F61DAE7C
8882384282FDD6102AE8EEFEDE6447576AFA181F27A48216A9CAD730561469E4
78B286F22328F2AE84EF183DE4119C402771A249AAC1FA5435690A28D1B47486
1060C8000D3FE1BF45133CF847A24B4F8464A63CEA01EC84AA22FD005E74847E
01426B6890951A7DD1F50A5F3285E1F958F11FC7F00EE26FEE7C63998EA1328B
C9841C57C80946D2C2FC81346249A664ECFB08A2CE075036CEA7359FCA1E90C0
F686C3BB27EEFA45D548F7BD074CE60E626A4F83C69FE93A5324133A78362F30
8E8DCC80DD0C49E137CDC9AC08BAE39282E26A7A4D8C159B95F227BDA2A281AF
A9DAEBF31F504380B20812A211CF9FEB112EC29A3FB3BD3E81809FC6293487A7
455EB3B879D2B4BD46942BB1243896264722CB59146C3F65BD59B96A74B12BB2
9A1354AF174932210C6E19FE584B1B14C00E746089CBB17E68845D7B3EA05105
EEE461E3697FCF835CBE6D46C75523478E766832751CF6D96EC338BDAD57D53B
52F5340FAC9FE0456AD13101824234B262AC0CABA43B62EBDA39795BAE6CFE97
563A50AAE1F195888739F2676086A9811E5C9A4A7E0BF34F3E25568930ADF80F
0BDDAC3B634AD4BA6A59720EA4749236CF0F79ABA4716C340F98517F6F06D9AB
7ED8F46FC1868B5F3D3678DF71AA772CF1F7DD222C6BF19D8EF0CFB7A76FC6D1
0AD323C176134907AB375F20CFCD667AB094E2C7CB2179C4283329C9E435E7A4
1E042AD0BAA059B3F862236180B34D3FCED833472577BACD472A4EA03B9F08F8
DE0B33CFC11789C704BD5C7E919D50F0A9AA99CFE18E0C034ECC3089FBC710EC
A202266E06473AD4CA09B383CAE152FCB59340B1C8BE85C8A5A5A9032AFB86C4
140015543E08278FE5D92F926DA4B5FBC2FBA76A02EE2E88BB37B165E7177133
AAC1637153A17557A188F57D0AD86E33A28664A94280E037A7D77475991D3761
05FD463C145657C709572178B5366E9F211C1FBE5E606C2701D825AFAF5F56FE
A1C63F3BF0BED03CE101A1610662044D395B4E258E67760E5CCD772AF40BAFDA
7CF3F05D20710240F518CB4B9780945758569551CF3931080DD89AFC681D85CB
B69BCE0FB79CCC35AF9E6A9A8877753A612EAFE34FEC576F29C2494647FB9144
DA32DDB683F7762E11224992BC3BFD38353414B0C2DA9CA12CD15B1B5BD9072B
8EAEF879D8808EC75B33928517F0949B3A0E5B017E5F87B92546A0FABB9D5FD7
006724B0F1A1A42FAC8C9D444D7FD0177560858A22DD4595B4E28DBCB758BBAB
AC8D163CDDE32F418D31B35B0DE08DB983ED7FE72AFB570D359C7A01BAA2C5A7
F1045CD9D21B328688DC0E75CFC97095840E360FB45FF4B92FB2298AF88CDA36
E9A70D3BCCFB61AAF88F4BF339CD9A7FBA5E9B79BBBA7783C8724E6998804E62
4D707B2BC77ED6A01297A3F4AE53FDD7DE409F87915F7A522504DEC9CC7D297A
0A0DC018782F28C20F34BEAAA6D806883B69B40D0CC1BCE7B69BEC11FDF13BF2
766C5D202CAD140A0013AB7E6E42997801552CCDBF71A11E0CB937B45848B9FB
53D44FB75D2AA20FCF789A5D7F34E5A09820F80505211A33C2BC0D166600BBD0
DA9DB9634BFB43190468AA16CB8B93D48E9DBD8F2F0398BD8C486ADD033B80FB
71D97B7E15140EABACC4B89D56EB3B6B7C2DB0E4273E7B2C7996EB3A029D8773
9F8410DF1453666EC447DE29F4ECBE466BE0C21C5C834E23E6F5B1B1BAE429BA
D121239B0A933424628FBDEDE46D7EDB4DBC34E248CC9BE6D9EF704719528158
4E3FAD6B904641F6D8805546402C23629D3A0F08A3F2738542FC3B4D737CF84E
4496567E86E55D98A4BDFD6C650568CCFC1D5D2082E91468D38C6BE4E0DC7E06
D77D4BB393E5ED825923318AB6F680D6650F7F22D0968E79B14FE0866BD186F0
00B47AF5C7C0865F996AB96A9556A3B3D1A2FF1F0BCE1336EF936ADE997B4F98
AC27EBD999DF21DCD0C86F71E3C8FA67C4E460A621F5FDB3551FACDD61671782
89F984950DD61F4BEF04F3083E11DD7B5DD0809B445C2E88898385F30CFD8981
753B4167AB5E5C3BA5E051B70EFC1E8543766BDC6BB58AAAB75175230AFEAB60
B9C63BA8A33D3715A079763FCD50FD233E1FF43122A3395F3CE0EB8F6DE605C2
D1D9D09953403394C78BC10D5C8B8B7688A9876B4F8F305AACEE6B724175E07E
AA5D7EABECE12FA6812783AEA54EFCEC9237FAF422BE252420F71FBD6ED2D5E3
DB0C1C78269E90BF3A91FD952EC2DDD6B5D8EE1874BF3A2B5C9A29CEC3705432
C13DCE18009B1206CE8C344F25C8CAB6FB6A1BC34035B6197D92439E4E973198
78EDD6401FC4455E59798E75D1A76098528AE625D5A7FC545D4C194440188F54
9A82DFBDFDBA253393B800FC2EE5E9F7AC3E795C12D86F85D688DB11297BE6FD
632FFA7380388E52CF309310BBB368227C72EB8C428713F2E9A91DC55727C489
AF4DA24F7AD2E2F939E11F0304293BBB33F71E2B92516D52CEA98863179B3FAB
E695A46D857868EB4B0B2C5E28975E0D53D6B617EE30404C2F90C558953BF2B4
750FC408296E2864DE98DAA5AA0D4A555F6CD5640AAF46612D0686E332A144A8
82D6D73C7002455C5ED4BA4F3F28C26EE55A352729CD4335CB44088FACE4207A
51C17DFC9AA3F653AE25508C56AE40E0F38EC92C1C80077E2BE7B6B169B10382
AF241A80245AA05182CB53B79FF61DBE03BC16CF0D4E047CA7937631B4ED0111
3845DB8FA8072681090D5EFF2F1FF94FEE26CCD28658DAEE6FDADB19952FAE83
DAFC8E50B224D85BD3BCA80482D8531C198063B28068821CC594207EE15992CA
2A3DA7402045824B719C8B38CFCE7486BC4E961351258C724FCD6DA70624F2E1
C145019EA45AD5F8CCEACB7C01FC4A87386113996645B588D43F22BECFEE7F7E
3DB938CB3B504AEBBB035CCF6440169DB7F7E04845FC26FBF59FD3D5DDD24AB2
E556D486F2DE8E75C36C8EE91121A4D0A5703FAE7FB460AF1FA6FBA3E3EA89BD

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY7
%!PS-AdobeFont-1.1: CMSY7 1.0
%%CreationDate: 1991 Aug 15 07:21:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-15 -951 1252 782}readonly def
/UniqueID 5000817 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D251491EBF65A98C9FE2B1CF8D725A70281949
8F4AFFE638BBA6B12386C7F32BA350D62EA218D5B24EE612C2C20F43CD3BFD0D
F02B185B692D7B27BEC7290EEFDCF92F95DDEB507068DE0B0B0351E3ECB8E443
E611BE0A41A1F8C89C3BC16B352C3443AB6F665EAC5E0CC4229DECFC58E15765
424C919C273E7FA240BE7B2E951AB789D127625BBCB7033E005050EB2E12B1C8
E5F3AD1F44A71957AD2CC53D917BFD09235601155886EE36D0C3DD6E7AA2EF9C
C402C77FF1549E609A711FC3C211E64E8F263D60A57E9F2B47E3480B978AAF63
868AEA25DA3D5413467B76D2F02F8097D2841804B020B210C0470066F33B37E2
05805CEE76C91696F62E34EA09B7B7D6D5A4009030F0FB377D84497D56557DF4
9B39A8B5B98BFC07D37F77324AE22B7B9C462D17C175A20B9F5E818796D45700
1B13FC4967F4CC16F5D3E645209EC479769A92A04A43761D8642ED0C9BF33AAC
9657CBBD4660088DA890F54FCE4DE3A70A5D89BFBD0328AA40975F1ED79058FC
D252B11651070EE2E1D6B86A7DEF832055A445C079801AF62250E150F630B951
20EA3A5CA079DCFF684F99EB43722763787542BC1083A745163A51ACC79EDB46
C6EBCDE071575E1C564959B0EB65673DB141AF5AA079ECE71538F24FE6B4A0CA
1F6396DD9F2E19414AEF30E509072E10A93F42B1FAC207AA85BE659B33888117
FB2D33522D0DFAC38C5C4D26B4A852BC8D2F8B3209F86A736E1FE35741C9E476
CBDDB15A176B012D012BE04D404DDE6135B3C26A8C8D52FC81ED6B1BD182159A
93628B7523D411D97D54CD1AEB6B748030F9685E1D6DBC4D3FF2D4216706D3BE
C960C3BE6F23B4167819B25B1EA5A60DE2E31B0B75F6A7A6131F945757036EEC
ACD62475FBE4827AB64CE52DBE8CC96A515B5EE6FB4E1EA0600AC30CD1032E66
65771814454A910FEF1A286396
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI7
%!PS-AdobeFont-1.1: CMMI7 1.100
%%CreationDate: 1996 Jul 23 07:53:53
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{0 -250 1171 750}readonly def
/UniqueID 5087382 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D77639DF1232A4D6233A9CAF69B151DFD33F
C0962EAC6E3EBFB8AD256A3C654EAAF9A50C51BC6FA90B61B60401C235AFAB7B
B078D20B4B8A6D7F0300CF694E6956FF9C29C84FCC5C9E8890AA56B1BC60E868
DA8488AC4435E6B5CE34EA88E904D5C978514D7E476BF8971D419363125D4811
4D886EDDDCDDA8A6B0FDA5CF0603EA9FA5D4393BEBB26E1AB11C2D74FFA6FEE3
FAFBC6F05B801C1C3276B11080F5023902B56593F3F6B1F37997038F36B9E3AB
76C2E97E1F492D27A8E99F3E947A47166D0D0D063E4E6A9B535DC9F1BED129C5
123775D5D68787A58C93009FD5DA55B19511B95168C83429BD2D878207C39770
012318EA7AA39900C97B9D3859E3D0B04750B8390BF1F1BC29DC22BCAD50ECC6
A3C633D0937A59E859E5185AF9F56704708D5F1C50F78F43DFAC43C4E7DC9413
44CEFE43279AFD3C167C942889A352F2FF806C2FF8B3EB4908D50778AA58CFFC
4D1B14597A06A994ED8414BBE8B26E74D49F6CF54176B7297CDA112A69518050
01337CBA5478EB984CDD22020DAED9CA8311C33FBCC84177F5CE870E709FC608
D28B3A7208EFF72988C136142CE79B4E9C7B3FE588E9824ABC6F04D141E589B3
914A73A42801305439862414F893D5B6C327A7EE2730DEDE6A1597B09C258F05
261BC634F64C9F8477CD51634BA648FC70F659C90DC042C0D6B68CD1DF36D615
24F362B85A58D65A8E6DFD583EF9A79A428F2390A0B5398EEB78F4B5A89D9AD2
A517E0361749554ABD6547072398FFDD863E40501C316F28FDDF8B550FF8D663
9843D0BEA42289F85BD844891DB42EC7C51229D33EE7E83B1290404C799B8E8C
889787CDCBE47AD6047AB359FCFE312DBDCE0F26854E5E4866AF64CFCFF3CC63
0B2015AE629D3B890159FFA9C719E7102D7EBC0B406BA5268DB20E2E3B0B648D
9AD612F398999A875671FA3C68FE7D0440FDABE057492E3DF2420DE886672950
53E650FB34D122496EF2C4C967ECC008F68C45C2E9B1E91C56DB943008DA62FE
1C62DFED8A808462D025E77A2C4EB1ABF1A4ED0A5110A9D5D41FCB86760D4EC2
96716B2E9FB1F16661FCEC5A323572D281207E52F585B3B3B4AF319227F73B60
B6E61727E651CEA007B0E94CC0CB2C8C95EE03ACBCDD3D9F02358B0074F4C332
3A4253BCAC36E8C433EA5D87EB39EE2155FE55E64F1A3C7D24D70E765F6E8F15
48F681D666436D7C7B918702F158C5A3C9AC78A834AE3580740071484AF5557C
895FBD6EA700996D8902DBADAE1235F262DC25C0023C411BD9941D707E282690
EBEF866AA91A5BCBA6E32A9A9991024D2448BD12852945D33607987836C8677A
12239E1E4CEBD281E5646AEDB98C17B8F24CDF14DFD203CD0BC0BBBF9303928E
CC273896945984EFDFAC86455E2A2154FDC86764F5073ED8F24A25133B83FC9B
582F940C00BEA80A84403F7594FB0DF0BCAC14618A590E4AC439BC82C0A164D4
99C82480057564E7ED56AE39EB69815678D0139183FAC23B406AEA1B0F5986E2
CD6625972E593C3D779F4DFBF08921663E362C9887721A496A3D74EC582905A4
9816FA4458E8C8BDC9051689940FA5F98F978ECA0EEE4072DAFE07604CB4107D
A859C42A613000804F30AD39C3D53115B0DF8976088AE2FC396A0E5D62A75371
98923E10E66D43D6B80124C456B308DAD2660D357F5F70EC31EAE1117A0468B8
6D00600056E4CF75B379D2A7F0162274FCF50EBEF6F96A393F73A893EBC7F50D
3C10BFA7477234BD93863DB2DCBE20A7940A193C7DC5E2736CC7B10BA2526E3A
5AD025A3EAA47F68DFD673FA0867871044083824B3CECA173A8F8945D21C1347
4677289D6A5AD09F2C929A130A60819A14F7EF1B8BDFDFB95D189F56219760CF
01B80C73EE494EA2B29E38AFAC2922FAB194ED0B20DA8F8043D935999D395768
4D0D252FC5F6950BB68D05ADF813C0C4A933EBE863D39439BA53D9227E715FDD
CC9ADD7E614B9981DDD94544ED1CF12915B45726A2395A3CF5933F0A2F6CD66F
1B67DEEFD1244111DDB0C18D493A4F4314BB7F1D8C5EF0A16B1FF666ECB3325D
3BDE0E7A9A5726E78056C8CF9FBEB7A2C94436832B26C5F66925DF6D8E7ED02B
D218ABB1913CE4ABF0EAB5EF84377FE66727B6963497487D0345812C2B8915C1
2CF540C93D1207A8D6F0A8755A8A33581D85E65977C4B95F73641ECAB1F4ADA4
F53709271EB37FD487A4A209033DF45459FB67479F5F1E98F1A71EDF7FA3B03C
D5AF7A904072BE09FFFF96F2FDDF62DB1BA1CBDF2F2C031A52893AFA4DBC9643
0520E3D5B1E8A3F20E1B8733A28F15410320389ED64F93BAC092C888DB961306
FA2E5B69128924D9545E3664A95B6F85A386E62BB2493A52DD5BB52DBC62BA1A
741D6D4F330A366A2502D2774798747866AF40C429C961446D59B32F1AB71042
63B3108E2D7CDA754F4045496CE0E658427C76C6A847AE3D0A8B44CA25CC88B8
378A9F394A4ABD93DDE4B33E43A936C33A020A461F788A9BA23680E40C80A935
521EBE6FE2C99991C7A6D14AB59879A82BA12CAF04289884372FB28D9074AB4B
61A670B87A30BBE500B0E6180634EF4B75114C4C9FAF06EF06378B39F92A4A5A
3AFDE552EBA881A0DC65C83D66A1B425BBF81346D0453D861F65280170F3E86D
A6C48B0B3623989C7A340BB48DA526013334AE128F0747BD67CCAC2D1CD9E7A7
EF38AEC65A3FD7D60E33FB7D48D23397BEB6F658FE6E1E2501ADB5FED6142D14
13559E01B00F08434CF1700999B4DFBEE64B4C0ED09202FB97881ACB7019ACD6
042B2EF482231FBD2D41DDA2A23AC2A3674A628FD65E11CBF5200C345015DBC0
D656C91CE79DB3C639860C6B616E620EC4F900590B59DA58477776DB53F394CF
E73BD6CE0AAE63BA7964F59A856FABBBDCF5D2DA067E5EB80517A166245AFBF0
6154527099E8309E7E1BACAD3FCF9ACD07D663B0A2CA3A89DFD60DC6F9560D9E
811AA88B882E249DC1C31843C06194332630E79F70F9F796035F47AFF141351A
251350496B93DEC3273158C7FD922844DF4993E6A10783898AE1099909CF56B0
35E05C5ABB6481EAA1ECAE90100CD679B0DA870D1915EB057C9D006D02492A9C
5B934C0E1BB64E7AFF76366DE99FA1A296D00BC9ECEDD246E90F071309688738
1547AA1C456B2079E6B4F3BBD069C5CF0BD4812D4A255651F8FE9B5A62A9D2D9
DA9BE299
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMEX10
%!PS-AdobeFont-1.1: CMEX10 1.00
%%CreationDate: 1992 Jul 23 21:22:48
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMEX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMEX10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /parenleftbig put
dup 1 /parenrightbig put
dup 18 /parenleftbigg put
dup 19 /parenrightbigg put
dup 48 /parenlefttp put
dup 49 /parenrighttp put
dup 64 /parenleftbt put
dup 65 /parenrightbt put
dup 80 /summationtext put
dup 88 /summationdisplay put
dup 89 /productdisplay put
readonly def
/FontBBox{-24 -2960 1454 772}readonly def
/UniqueID 5000774 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CAC6A7BEB5D02276E511FFAF2AE11910
DE076F24311D94D07CACC323F360887F1EA11BDDA7927FF3325986FDB0ABDFC8
8E4B40E7988921D551EC0867EBCA44C05657F0DC913E7B3004A5F3E1337B6987
FEBC45F989C8DC6DC0AD577E903F05D0D54208A0AE7F28C734F130C133B48422
BED48639A2B74E4C08F2E710E24A99F347E0F4394CE64EACB549576E89044E52
EABE595BC964156D9D8C2BAB0F49664E951D7C1A3D1789C47F03C7051A63D5E8
DF04FAAC47351E82CAE0794AA9692C6452688A74A7A6A7AD09B8A9783C235EC1
EA2156261B8FB331827145DE315B6EC1B3D8B67B3323F761EAF4C223BB214C4C
6B062D1B281F5041D068319F4911058376D8EFBA59884BA3318C5BC95684F281
E0591BC0D1B2A4592A137FF301610019B8AC46AE6E48BC091E888E4487688350
E9AD5074EE4848271CE4ACC38D8CBC8F3DB32813DDD5B341AF9A6601281ABA38
4A978B98483A63FCC458D0E3BCE6FD830E7E09B0DB987A6B63B74638FC9F21A5
8C68479E1A85225670D79CDDE5AC0B77F5A994CA700B5F0FF1F97FC63EFDE023
8135F04A9D20C31998B12AE06676C362141AAAA395CDEF0A49E0141D335965F2
FB4198499799CECCC8AA5D255264784CD30A3E8295888EFBC2060ADDD7BAC45A
EEEECDFF7A47A88E69D84C9E572616C1AC69A34B5F0D0DE8EE4EDF9F4ADE0387
680924D8D5B73EF04EAD7F45977CA8AD73D4DD45DE1966A3B8251C0386164C35
5880DD2609C80E96D1AB861C9259748E98F6711D4E241A269ED51FF328344664
3AF9F18DCE671611DB2F5D3EA77EE734D2BED623F973E6840B8DAD1E2C3C2666
DD4DD1C1CBB1ACCDE9DBAEDA5FE0BED42D4517BDB3FA340A29777AA8D4FBA6AD
EF1A2593BE17D2A688023BD4E12768E88E2384C5B5141B8079A12636E1B26138
083CBDEA78AA36184B5B7650855B6438A501201CCE4C8582678A5A0F842FB4EF
E8480151CFAF845F42FFB0D8B71804A0517E161826A44B37A5E93E1F494EDFD9
F03F689DA1887C3A03C8AB76AE2DD553F81C433511C4122C0281C24EBC57BDC2
98E97C3B672131CD33359F7892FAEFAAFBFA949E2B5EEB08B03D19F7C298A1E4
E0993E0D61260231B45BE22EEC582659AF39C34BBDBA945A85F8983F873AB131
30EDE0566778E56C8E7D411D88D5DCC5E11FDE47DEC962E1C86744A99198C6B4
6F1DE5E3D819C35522637A0898F5A04139C7E2A8AEFD04A3F0F4872CB20537A0
0422FC2FEBC04DF2CD88088B1B5EDB500EF71F4B1D458563377F39732D532338
8FCD77D06D0431902CF6C80F2FE4E306A493470C2ADA1CC0A28C3E3E872E29FB
52BB29FDB94E74C8CBD7A0EDEF391299F5A5BAECC651D3EE57F6CFFA017AED4F
1573FEA45161527405DF4B284B2BC2C20B8CE3E55C6588A2F0A3EDBED737DC86
06A23A7AE31660E32B0E0411D96E696A3A0850727E8A1E1DFD2EEDD36B4ECE17
7E26D990CFACECADEBA206D4BA14032EC16CAB25E6C9008956F48E9D828CC329
CF357AFA4FEF23C1DDC6B623AE0DCDC20B5C21052C441221DA38896D4978717C
77507E78995820678FD392ABB331EA4FB202C188B080C157B9EA447453F72FD0
A2BFA274B44B4CCB7B94A60567D707D78806027C00E895B9ED367512D20C0D19
85A3328E0081946829B153A703912FC801B63F49FF27DE8266CEE7A2D18638B4
779C9B4B3F69C6BBF8957B8CBF8905269AB2E2F68DE837813C0A36AFE52A0D26
C09A06F1DE678E95B3E466205120BB524B436AD0F239D3F4508E62CDE69AC235
40E3D330FB2B0E8822BCBA0404C23AF8A53A2AE53ACA397DBB832F73D1DF99B0
7C4AA946825B46E0433765C71BA7FE71B09CB0EE436ADBD007B26ADAA5241DE9
90FA5AE20A64FDCD3DF4F0BC5272DDEE6ED633777E8513DC346D2BB20AFB7EA4
4633AB210EB160B07C8BAB659482A7B11AE7283215FC38F33BBB14EE86BFBD8E
812E7B6A977CCD380038E95896F706568EF1B180CEF930B198FACCBD2007CCDC
78D0653DD2DAD0CC4F1B9720D86486CCA699BAF02FEF52F646141457069B7A8B
CA33F09C733E0CEA5F0E0394965F08258DE293A1F44003E7F9F142EACD742A33
E8024EC038ACCCE2FE2ADF5BE2EBCDBE7984C919124B09D39B0E531CF91ECEBA
0BF2C5B75069CC8250AFE300F062370400E490026C4328CFF63983C7E1AF1523
67017032A5E05D3D14F6ADAE2789A21EC85FBF216B9536023904BF8FCFEB1F00
63B9ACE544C7EBE48110BD3D7F1B981311D58B41C25925C5CB5611549FC50577
7879B766D09800E07EA0A88E68AC439932F44B6CC73463DFC20D2F6A8C8BAD10
57570089A9B62DB4584F9D0FA83EF85168BA655E92DFEA343D7DE2E890F5C8C0
EC33B0AC14D46C836CAB3FBD8F4EB0ECD4C965715C7DCADE74B2166E46B32F66
FF21721145E4971D1D195F540BB0603A7B641C23360E18F45FE3221836159D64
CCCF16E3E7E0C487BBB15C364921829D9223564081FF2F7CD3C009F67B1D9B4F
CD367615ED137E712AAB86C579CEFB2549440A40A6F0450244E0379F7A7FBBDA
AE378690D902842A91250CD9BEEE4710AE8CD9FEEDBDA3311C7DB02783D63738
B1B43DA5FCD2162637862BEAF2EC144B11E713E39881B131AC752CC140204091
3F4F87BA3FE691A963F0AE68630D8441BD42CDC1A2CCC1295A78A13007B839D1
B5FBEE6D4CBE2A30E9D694BA5B2767A50C71BD57343406D5CAEF8ABCB183945F
141F794817C7EFCE92BED7E150C3A38D6850292309559F7F6A885F99860B5D0E
D4A35E2AB75EE42E11C3B8F34E9C134DFC46368605972750C2AEDFBDC2099FCE
8CC56D38906783E208BD53B174E1B2FA4D45E9EBC98BD444EDD2424B3DD447B7
2E6BC76AA373E71903C46F8E3A1FEE49575C88CEEB97DF5D0FDF3D739C1F32D8
CB4C970BBA9B700D0C43C4F01C914E2B35708C8CE0E1A6D740E6F72F1F26F7F5
5E4D1264D4EB06072730BAD2480C37A0E8962666769C8C1B043C9AC84DA27370
E47CD21F2417E893DF61E10ED2FEFA36C2AFC420CDAF7A7BD960A347EEB57DC4
064DF10B6938AF4FBCF5B751BC521FAD46FED132B6B7F80B6E4CE32D9B613287
82F6EB503FAD5185A656EB0D2C12E8525635A21C72C6FE62354A47D439B67CDB
E66E8D4A632251742547820CDD64F28EE40802D360DD5908164DFCFE3F5AE392
DB7EEDD10A1ECD9E0F5EC41207BF426DAFB6C477E05DC51C5A583DC972E2A46D
21BC5E47CA1206AFBAF3E3CED5DD6E47C9E0842060111E73D5E5176E97BF1FD9
E474FAEFC21733BDECD41CE0A2F87915EB4518A2EBEF1508E7B76A4C0C5FA1DB
68EC5FB0E73906E254CFE031FA96A683D2C10AEA5F5C2E2F5D17360E928E8CB6
798E7379C0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMTI10
%!PS-AdobeFont-1.1: CMTI10 1.00B
%%CreationDate: 1992 Feb 19 19:56:16
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMTI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-163 -250 1146 969}readonly def
/UniqueID 5000828 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E3948FFB0B4E70F212EC976D65099D84E0D37A7A771C3101D6AD26A0513378F
21EC3643079EECE0C9AB54B4772E5DCA82D0D4ACC7F42FB493AA04A3BF4A1BD6
06ECE186315DBE9CFDCB1A0303E8D3E83027CD3AFA8F0BD466A8E8CA0E7164CF
55B332FAD43482748DD4A1CB3F40CB1F5E67192B8216A0D8FE30F9F05BF016F5
B5CC130A4B0796EE065495422FBA55BEE9BFD99D04464D987AC4D237C208FA86
0B112E55CE7B3782A34BC22E3DE31755D9AFF19E490C8E43B85E17ECE87FA8B9
1485831624D24F37C39BF9972D74E6EC4784727AC00B9C4A3AD3DA1C22BD6961
7E0ADAF55422F22ACA5E4DCD4DF9FCD187A566B7FB661D0530454D0DD6C6C50A
7A3875C6CBF8EC7769F32A1F3F7FC1C072BADEC97794D4E90E0035282A170402
356E5A9CD9ABD80AC4342A5283E458A7269252F4541CBB6452B39ED54D336D0B
19928E9CD1AB26AD83EB209E2EC75011A2643813053B5DBB0246097C4821B5F2
C92554E9140BE35B2DBFCD98809A8EC9FC910FDE9E0D86457C70ACB056EBF90F
244DC0A5BBD455E15D6E3180311D52CF50B0BF7D0A7F64F3A1821E0AEDBC2E7B
AEB549FE1D51088C153799C6E089B5D5D65E1C4E2D2B430CDF1FFA23CCB25D95
5C4DD885310A706B320AB25C8D742C6F29953254FA54DAAEE60ED477877D19BC
D28E9AB576B0EA088171FD000B60D73B3C57F754BC07EBC9BF751B7D2B32459D
993861B7C4B0D98C422A11BECEF76F4EFC0ECAEE89723E6CED53E3678D733363
2DF068AEF0FE7DFB57393BDAA439A6A4C396F86032A98009EAE1247B7DE83B3B
E46DF2898598FF5E6CA6953127432A967E4FD41CDD60D6E413059A58FA556EF3
309178B57C16A763CFC9BEEC276944BDEA255789EF4E1ECDE1EA43EEDB955513
F42EDDCF39AE522A1DC2D80B2772B05DA60F3DC15A815A6BAFEDC399C7956E75
3851CB3588E22936FBFB63A58300298B11C45D82385C083D07AF133BB1BC941A
FDD9F34D5E0B8087EF2A58C54D8AB7580EE3ED58AEB83B72CB9028F472ADBF11
05A77651F118824F6CD00209EFB60C1D32D46A78E8C8DCB8B0E742828E3B7D17
DF5200D68189C91FB8489CDEE8BC223C4281DDCA5F7DA80BD5C2D66A14695EA1
5F05E03500579ADD440ED2C57F535807560C6FE3873143D792734FEAB93AE8DD
633BA6FC5683083402BF086D23594AAC84A4868AFAA32AFBDF86142B350F8F62
E2531321E4CCF34293024EF8AB617BAB11A3A5EDA03CAC5AC431C893607DF8E5
C3DC8646027A7554625A16FD184A70DB5FE6DCEA366B64430A147144CC9839F5
72829FFA42BC3A8406D680E44A0305C9C9E265E91AE82EDF30F73730DCD4AA29
CDC982495C6D877EB1F3F645BE0CCC9D1CDBAC819234AD52CB62E5A6ACBE4C5F
E8F3F6A89D01191F5A1576D3D5C5AEC04A118213A327BD71B070C976351F6383
557BD58BC417951F0C44B1EBE5C1D145565519478D44C54DD262A689559964F1
1BF480B071C9032B6FC2FD19BE881FE622B98704C69C701B74BF8864AEDAC460
8BEC21D61A56095C8CA5584A094ED840E2107FCC8D09E6465C123EF3FD78F557
DAF417ED40B13F1850082A0A12B57D1EFD5C19A6A18C8BE0D9E9F2FA13C0AA0D
ADD2A5F1BA812B3DD3EB36EEF04C46DC8356C422211D8669EF2678D957FE14E6
C70569F953F27A14790AD684BD6C56AB488DB84A8088079BA4239CFB1545305D
411F2B77F608F16A693E4710B1E812361D303266AC359A763C888376075AF70C
7191A2CA6E5C1A9AC3BB1279A8E40D79F5436F88EA1F3323610226173FF7CDE1
5F6ECCDBD947B9677377120D7463A8A6881E59198C221723F62BA994DCE5C85D
E470A96DAF175CD2A2D4C754574392B1B1AB20D8726853F5D1AB95DE4E68331A
CA899CF4C3144A16DEFD65F90FD388DDC20395ADC92B2BA4110DE661711B3146
9330F43501AAB5F42F72017CA1840E3A544038A9E6BCF4DBABEAC613D80D6155
69F3CF64F4A1DD73C30C6EBE94542B058CD3DF8D81A83DAFCA0DDF51E1EB1AAF
DE03E608BD1FBA9891329AD916D06EDC54DED29498FF47F24FB2FDBEAE3E5302
EAD8BBE0127B50851CAF9D71CCC229655D8FCFC90F5F7AA0CD956D2DDE084F69
F3497431B3F8D6DC281975DE1C465CD3D085347656CF9DA507CA5E1410332147
3F465EC93737FF732B63732AEAFB37E7BDDDFB4B317A3846561BFAA0A9C36A89
1B7A767C296C2CCA9C93F77F428F6F09E3FB4EFABAB5C7B0E97A6528294274D9
1FA47EF2A417CBD8D3C5E64229CEB33B6138F4C4B8BC88CB8BA74AD0903D1499
E7B43E84DB9323D3AA700C972C3D2E661BBC925D65C157CB470E87886DCF390A
554CC48FB9718A205171129979E20B93B1105A2CCB4C4509FBFE7AE264ED5F57
23DB02764EE1EA379CBCF8DE482497D2F7ECA01D102F5A718BC653AC0BC01A66
76C46F606E1ADE1A46E84659A4ABADC34814048B02C3135F32ED2ECF8F8D1C06
2C65A75C4D78E1386BCF6FE69694210A7D6A9D77D73E5C9792820C6089641AF3
907438A54F6683B4B0385C79B2BB99766307395D3D5B170F05F7B2621169A3F8
E417C5CEFC2BE8C94955402CCC6CCD74683B0B90C357BF8251D48B4D921F92F9
CC73A05CB5458ECD7B24B4D2B6CA4723887BB61632065FAEC8C2914E1C2AFE05
0B9EAA5ED02E2ED9C8E49A92CE77B51C59CF23C6EBA1F98CC8DB5AFC2CF7E6F2
12DB2F2A81803E6F1F830CE17182C8D6B5A49F431A6D672CD7199293809A7665
40FE96E832A4BCC8FF6B4B006399458D0A0B79E787DBE4084F179290376E506B
FF7EC5D0422EB485733DB022239D5CF5AADE9F496FA38971AB87914D6D32589C
7011B717A9169EB82C0698958004E3712354667E45DFA65C217D7627445FECA6
DD86005EA2E5F621CBD328583F46E503B9429A90ED1FA17CDB91576AE3926D3F
6FF9B7B0366AC937F9ABD6501F7917DC388495B6D377D6BF02A14F5E43FE73BA
02E11B766EECCD443B5959DFD260499EFE847BCA4B19C8CED5A01C7E24EEA8F8
0178C830F69FD48D5EE3D2AA42B6BE357C5F91749451FECEE27F6527D244DB96
695C2BFD047B975761B6D627A4690D005019C55A8B9BDF8530B02E86D9482DC2
7583CB9961FFE2E8A93B31A0B3BEAB8ECA1138CBE089B38D0DA822684DBC212F
5D883DE7121CF91EB4E10A29E24AEA7DC9BA6E4939DDAAEB9F6300E107385243
4B7E0E0C4D2F43AE2DC2DC6B10194999B0C8D4FC7AEB57B6A3A223A612C50EEC
0096370DF4AF189931BCFC1D9D74DE2FD51107FDF9FB8837070B9E9281D6E85C
2B2BC4450B4AAE250B0183F0AE98D923E9E3A3216FB583EABEFCD0E8B3421D84
A35B182A4BF82E95769AD0F8465AD84F30B702B72DDF005F71C4E14886B002E2
4278211CB945524D5E2B93316D12C4444102A2D8A2C51030C9FB612945D0D1F5
DDB29EFEB1204B18DED4A617ACD258C855316AD4B7DFD691146B1AC1083AF69B
34B8D8128B78BD21654B2D2F6378C92C772CA613358CBDEDA0462D1EF5059001
7E18A959FF0752332139BCCB612865E048A3796E7FC3AA59ECBFE57D9EFDD266
75D91268C15874586C6C21DA4A7E4EC8B9BA056802DCD25D91015B68D3AEFFEF
18D54AE78A7FAF1D13300D51C912B43E26342E3FF5B02EC42340861D1E8DBEB1
78B3895D34C4ED48565BE8AAB28954D7E469992C2F008AE673CA82E7660F4977
4B69A2AEFD9834F582C72B3E2BABA922056900DABA3776E64927A5C8DE9A1165
8754523EF027BE267E872FC20FEB07C3BE9A81A75957030E9E52B5B5A1B22B9B
40CF2F4AF1DB613322C15C7C4F2373927854E474474C86C2E4094CE4CC9264EE
C54F20555EE24BF48F4AF850F8BF7CF0F6BB8950FCB1A16FA2A0C4FB0E7EBC4C
25FFAC9011FF9FFC5739FBA489A37EA77B80199899901C0E526E4DECCE3199F8
02FB73688279B877CC0C2B165AC5531F57DC9ACFA14A98B6069B8C5B4382CECD
E8D8AC2B02939A70B59E12C841D7029DC57C0E3795064CA92810B1EEAC47DE03
24C3E1FBD02417BD51E698B5B2170DE24C0D9F7832AAAC7EE25D78056A659E32
FD453EA0D04D6DB178A7471B248C85AC3678B297A3466770F4E32CC66F82329A
D5A9666A2C31EFB6DC461B6193AA0E44251A92C11D0CD8EEA9CFF0A36CD87485
C569198006ECA03AB9BE6BF3D49979A40491916DC03BB8C86756FD34C142FC57
C0018F4B737DDA50F7E8A49A46985C9E98A23ACB4FA5F091E969C9D3F667A27F
73F4A4FDB316B0886AE281A9E3D8BAB4F81104DD1DFA9C8B587F718B28F2A462
FDC279D3EAD1CBE0C3A57F380ECB01E68A2591D2D692C00C6920175EA8FA1D17
D61AC9C27318BE0C19B2A655CEC4D956B548BA57D0EC8645F5F31F4733565402
5CAA5D458F8E910E947CCB93722AD95CF1EF0C21C079DAB827944E4565E5D8D3
B72DE435BAA366BDAC37F5CD9A438BEF6DA37164AA75212A20C3A55A1194127E
F12A8706A8384739768D975E2CAF66F3DE5DFA2087C268251A881252E13817AB
B4ECD9931621DC923526AD6C5405BAFF7B213BA46420BCF41217EA69025EADAE
54E6A4C1609B1684AE4D5161EF948A15574D4C711268F91E478AB4AB603C3198
826A38FCE7E6F491608E00459C99A6D1AF8DE6BBC46B522CAC5396DD1DB593DE
8D10DCA55997DD84C493B91507BA93065C10933A5B82DC9F7696D875C93AE006
A378C8C3101E8CEE3AA5F2D82099C73430812FC9DC6797974A777A1A313708DE
EEB219EDB7A00BBB3E8ACDCE5A4C3919291BE5434CCD2E5DC215A528F9BC1689
256FA8F170239F85C032EC3B95EC698311243A2E7850E5FEAAA2B2341C35D31F
B3EBBCB400F5C48567570020650AD5A8E424AAE8D0C5173E8BF7D309BF63813A
22CDCDF4AB8961DE98C4D5C30900735DA6D31D85C97817C8C2C2D01A90D586C5
5FFE86D31D85814D5EA5A40E3E2A46C0AA919FBB94EAF39DBCB1D0663534E4F8
DCE6D5A99F3B8A27FB95BC0F72AE766B4C882918FBAD863D7976752C2059FD50
53F4901C15861B5118D59FC76BE5031ED5D80E2AFB2E1154FE963B4510FD402C
C5BC4AF539D549512F663383E13BF5453C6982299D963B44EB4DD7CB2C7AEF9A
C300FB72B840EBDDDAAA26218D5D097AC47BEF5A1E852044FE57CBA731263AEC
9519304FCB6468358F4BF952B4CDA1ACBB89610B8DCE8015DAB555ECDD968A93
868B7B04E9C7184F882CE26A555CBA5F05F1A7BDB24BD991F1F94C2280D6C12F
A2DDB4EDD6C74A00CCF6D38AD3D420675DE992885134425318AD61AC653F962B
7EC8A8551A9BCB9A81BE461C77562B6A72AAFF17AC4ACB6E669745EC9F732BE5
3546CC29CB97CE5AD5EC0346817D1443B9B4BA2AB46E07A25C2A6F846CD78A96
96B782EDABDC2359A71852B51B2A486848EFF44C2A7580EEF57403F8A2CAE356
D803BF70C9A4930AA9C5C9DBA0711C2015AC985330321B859DA6417F1D40C0EE
E02E887AE41C59FAB3307A4F2C635DFE4E95F1A841C939D4E35D28305299B202
8B3ACEBD0406B15C13055A3FDFF269DD550D8419F80EADC1398E27FCC4762683
F4A8E79CE23930D1F3050F7E16F1F533CFC83A8B65DC1B69BB9EC64A6A6BF48A
4F6366ED5FCD39EC7D2584ABA880419DB21A2972F518861615D7A0E9689FFB0A
8BFC7CA656365FDC26695A7E2AF59656CAF8445EEA281B180640E09AD3FEB56A
F9A80B72E170A7F60D8FD514F089ABA59D4A6B0A9EBE19E994530CF23A38B7C5
6FA0508C3DD669BFEA0F99821FE47436A2A93C03CAF00ED408F53C7B00E91BA6
92541C69CA12109704E600F61C4B9A7A5CBFEC479E47958E81211D67CA57199C
9FB8A5A9FEE4B94428A08135062AE92B6E6093B7255E6A27107AFD785DA2E966
C4BC1ECB00CD4638F3042A484BBED5C50509EC14641F751731D00ECD7B5095FE
BEA6DB96025D6BD624A92870B7E76F99E8B5A2467E9D6B056AFB0E543FCD307C
D32CD0677794C494138FD50DF788895F459FB9E73100B41720A0FC1E8D572A80
CC5967C34948AFFF7A0BF31881AF9ADC0E556B7D9327299F5156104EC1AE37CA
10A26082EE0BA8B084D5EA79F8CB87CA294FE48C6F99093835C78DE683D92B72
ED2E61BE24837D7F7E9352007928CEF1E827A3B23E689771624C70DF8D04A8F9
227AFF73BCD7D313037771A1BD3A099FC513C1C07873CBAD1FF0ECD70A6E7621
F61103F8BB661C065EA35737B7511F6BAC19A3AE636413F467350A187AE64FE4
ED04B706668194149B1668795F1BBB8BADCBCE91B47F704A4E1E180C7193D6A6
0D5F212A47A2B64113843BF8F334D660DCE614B08FD2F62ABC5D56697A48AE0B
A03A765EB6DD347BC6B7C2A11A660333380A50DAA296E786F3C9F61225A0BF4A
94E9E5944220683DDBF37BD3DD33FCB21CCC60AEF58EF838925669137DCBC699
556B5C35801F36383E29C24D64AA795A99980B2DB2069F15BEBF0C5D52FE7ADD
C7EEFFEE4D20BA0E7BD6704A40227BECC5DEF8B369B0B4B3B2F0C8F3D0C0170B
CD48E4F63B4DEE0769D9C0731FFA17572CA393264CD1C149C15FEC81AEA62649
2D13D3A8B6D0881AF650E0009E8BE7FD3229CEF53A4369272E2DE75FEF3D5408
98E4C5D312ECC4BB7818FC5DE0E9EEE2724C2DE9103D6B324C76FDB28F2CFEBC
61EF1709E26BAD3728C1843E46CC444B10A76383C7FDE85A9F4ED2A7F616DA7E
A33BD41DB11690B4D42B9C80DF26F200A66DF07654F97A990990AC496BDA57B9
A63662199497025BA635A8C37CDD83B62514B736B3ABC2FC3B085D87B5E38DDB
E4701F26391C1AAA6D93120F900C34755A23E8407509DFADBAF14B4A91929848
2F4B4B8A7FED683A835B98CFD0E44E2AC5D77674E382C67ED3127AF610CACB9E
69440134426BCAE087B27D124E6B96D68CC363C4279E9E871FF3237E993ABCEE
E594DE069E627AB44CEEADBB41E426D24E2DBD76DB3C5015E3817BB3A5D159E5
061BBC0AC5AC4A6255F0199836FE8585A2D21CF80C3959F21DF7D187FAE98F84
935ADFDF57359034933C83745B36D3EE0C3EEC9EDDF8A8401462079FB2D1CF38
8B80AB7B87204E2B962E12B988CFB43C6E1658C15A12451CDA17818C814ABD0E
459D787FF3BD748BEEDD2A31E816CF6F2596B8BB44AE62171D01144A857ABBD2
2749802733110D9C9A94522F6A64942F879FC169AC351CB6EF94881B3ACB14BB
0C06EC1B6D5BC017742EE11D54A89C214FAD35E58FF78765415B401C0BB54638
DAAF5864A29FA69F5BC357C4979C13A1DF04A571F9AB1474C5A80936E99BDDF4
72A2F5E648223C111A55B5595B13E99299D83ECB8172DEADA50B47C6A64FACC9
A35DF1B38CBE99D88A650060953110D71621A55DCFD77BBB1B14CDCCB1D70BC1
2FDD020E4FEC860C868392720B898117B519F75917B05F70592A1235DE8A5BDE
D6219AF00D82A56AD23A63771F814B4D4C3B466AC4AE97462B3B1F70165492C0
6FEB6105C91E209BA15C85057EC2C34421B63E1995715E5F8D969FCF20926042
B34DCDD3A6C124FF0F50BA067E142C25D607B1397E32C27307F25BB939F04102
97151D9FC56B44C6B0D06FFDF15680F827D514558CD6AED7DF20FDDB43DD3473
4CDA3C3726CF8AFD4EDA7B8D8FFC150762C1C31D2462D5B1380DD86174DA35BE
0133C681FE506F012458F1A27D9CF31B3CF98DBEB69E144B7E6840E731E145D0
6526C47D76486CBF8A3EB37A3762BCBB6838D2C323F9C8DDA77B3792770627C6
02D1972FFB63FA6F8473C7F02AF177021C6F69C92AB768B35A961A2700F763C3
C9833AE82ADFB3DF084816896F7E8EE9753E576F86547AA9BB42DF8CAF432C08
FD9BCA01BDB3718494D3E3D103CF8378F3E330D7DA35CEDEEC3743D77CD83046
620B7A9718BCEE3D2A3B0F58F79C94DF17546D916410A5DB835D73828F558901
ED22460B511EE1D5F1C2FFBBB8DA223EC78D82E2602A576CE788F816E3E63247
185C17EDA158535FB904B9D56714A4B680ADEAB6E2CF98F753C76A51D835ABA2
917E3581464018C6B9CF16E423CBB33F49227EFB92D26AB4F50FA3E06AADC463
9A0710580B5CF2A78E857862C3BF9CCE9047EA7FF3B742EC66D4E7E51E2BD196
9E1AE2739211AA307F78A5360D9C525C831DEB6B679FF998351AAED2FB8675EF
6B4A56DF869FF1E59549239C079EF34F954D44ACF01E482FFEBCF070B79AE950
7BD4593D29651A45C0E5A9FD88B9D0228A1265846D608FE1A1DC7D44D7B6C11B
3AD036602B3773C92B8DAEA8059CE9668797EC0FB753D4DA6AD282B938E548E7
80D75F1E050FF1AC1771AA187EB9AEAC7379F207F83FA88BE977D2DD896932F9
45F4990FB4E1274F06E73B887EF5E7ACCCA59110AC14DB7455F85521C91722F6
842740E8D42AE5DF42C850557BF336158FCFA2D25D3214B047FA817D3F4C6944
8A3E00F8D358F0FB6D9078BADADA725B958B3B600599D5F93945ACECB0EA270F
2B9E6AF9B6CAD87D55631A154AC767417027A9ACF6670571DD106DB19BE1361B
8E36D5824716F12955A2DB803B4ADE34344D51B03164BEE5CB62F4368C1AF7ED
2BA784608FED24F402A1217DC004B72BF8BA1C7B88DDCBF990C33857E19722B6
31ACA5BA1666DCCF37388459E9102CEB37D0D0E31E0AF7F94168CDF3B4D56631
E24DB04EAA4F5CF5CCC737F90892F8E08BA1B8F4C9D74ABC108056D0D334E1C7
FA61F93F4E134DCCC7DB004C9E0F316CB350DA8181881628281DE917901B0BD2
B7FFCAB5DF6E8FDE18C63D48605AF9F5CABB9E1AE897E4CBE29DB889B0E69B4A
F06F06FCCB6E223A5EAA7D2160B138E6B5E58F965127739C4A2393B0443423D8
486AE9AC4C83BEC2F1D26EF343C4433B78D302DB3D9569C7A62AE484A63607DC
7E8C22F00EA090D07C4EE080DCC662303FFA11E1B9297B4715DC778668B73C94
6CD3D9F35099B8E7726B59FB4E1034F43C1E9FF5206F63E5ED9E2D362F93BB19
6576267A8F5AE1B903225D1C89ECA7D766732F213A4AD4F3BD3D98767D379E3F
5ED51157BF17E39A9478678A48D92F6251D274657F0B51B3783681CF3FF33BB0
6EF804B58A70194748158C7105FACA0F5B27E5CB9A5A0CF952EA0DEF226E21EC
80BF2F460F1CE9B4DE809C856A85C2D652276F1AD3B637B65A4D4644B641E7AA
1FB693AFD6EA799E1F0DD54245D55805AFA7DBE2FE45B0E32CAE26F6DFCD2C68
5821269D7E207C994062F9E542F8D730B5F2E649CA631A6D13BFEE92AA4B438B
BCD3F00DE4C31873F3F05081C7804311
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.1: CMSY10 1.0
%%CreationDate: 1991 Aug 15 07:20:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-29 -960 1116 775}readonly def
/UniqueID 5000820 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D31FF2B87F97C73D63EECDDA4C49501773468A
27D1663E0B62F461F6E40A5D6676D1D12B51E641C1D4E8E2771864FC104F8CBF
5B78EC1D88228725F1C453A678F58A7E1B7BD7CA700717D288EB8DA1F57C4F09
0ABF1D42C5DDD0C384C7E22F8F8047BE1D4C1CC8E33368FB1AC82B4E96146730
DE3302B2E6B819CB6AE455B1AF3187FFE8071AA57EF8A6616B9CB7941D44EC7A
71A7BB3DF755178D7D2E4BB69859EFA4BBC30BD6BB1531133FD4D9438FF99F09
4ECC068A324D75B5F696B8688EEB2F17E5ED34CCD6D047A4E3806D000C199D7C
515DB70A8D4F6146FE068DC1E5DE8BC57033D79919697C81395D5B94C3AAAB11
52D73937B8F82D3E2E764DA1B3BE273CBB84E4B1919CC1D5586C21F6FC23BF1D
82DE5A8DFA3E8F5C25622AAB9F7A588532D13C663079C8FB84DA6BD4D2DEDB2F
84CE30D0F188EEA2785B492B7704AF51ECE436B1B191B22DFEB7894DD5457E4C
D14787B5F8630B42B3FC9C15A1B7B887063D92009BE4A5A9F8416CD9187851B8
CF244E087740953A1639BAFFB86CA7C99FBD401FB9C556F330F1E4E987E715F8
59A751BA88003F808F85A690E55812D8FBAE945A5AD24FF79D59C9876B3CCEAD
7F3CA53A1A9E2696392C43162DA3750DABE6FDD5724427E17318D7C19729C68B
00CEEA2D35CEAE7EF6AE0DA0B7FD4C542993B8F17DB418742CD1FF41AF52FF9B
616FC67DE050DEE07FD3156AB84672711ABC25D6DF4D695C872B5880F7ED9341
8569E258B537212941109BD09FF780F2F7042BE9B19AC0D22A910311BC9823F8
0878BD3AECB1F977257765B59E49EF53927E7D692880D60900E9B54D16E39868
4A32B93B6EB792C3543C130DC53091A2A1400A16F069AED9DC908B628BB39775
D44EEFD1087D32369CBC5D6A2ABEEDB3D6B3073F9F043BD2D5EC9BFE1C7BBF6E
EA698F7E26294008C4306E28CC43A5D9524EB4039791515D167BC2AD74E4C3E6
17ED3B2330ACE9FDD09161FD8590A8EED81E829D938FCB6A2F99BC03B1ADEC11
058ECA538014121B38C5D9C08D220D6E29CC23AA674ACAD4C79ED6F7550FF05C
B292BE55EDD9848ACD3B7CD14F3FE7BB5131B473A41DF6418B2B3D3D9367287C
E8BBF6AA9CE9AFA8995B27C56F98A3F7A88F8FCB1DC12128CA19D08627D1AA05
72A17ADB0157B3804B6D9A247A94A6214F4E95A33B77266E55D59AA26A0FF5E9
A12C4CF4C19532F54B587107ED96B0ECA344E95547D3FD73EE4066B5CDFAE473
65CA1E5D37
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSL10
%!PS-AdobeFont-1.1: CMSL10 1.0
%%CreationDate: 1991 Aug 20 16:40:20
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSL10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -9.46 def
/isFixedPitch false def
end readonly def
/FontName /CMSL10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-62 -250 1123 750}readonly def
/UniqueID 5000798 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9429B9D40924DC059325D9D4CC0344F3F997A99E6CC0676735EBCD685AAC9142
08DAFEC78BB41AFC2F1C219910BDF41D6279284EF600B69776CA15BC8A34347C
30783C52AFA60FBE3E353E2AE354CF87B558776A22C776C7A0B5AB5CE1F941EF
C2D9CAC37294BF407A671F10E4743BF842143F4F7DFEE643BA3BBD8BB9E3F24A
BCCF7F0ADF8BA500620C81033EAE8C4EF2C1DEF13AC575F1B3BBB66F093D3B78
5412B82B67FFA087AF57182B2230F9F2137180CA58A7D9B2C822FF04BE6CD01D
43B2CA7058C7B953F6D9B5D6E91ECBAA5CDE1159B0E59C83DBAD96D6C8C8BAB1
374EF652D10C0F3EE7104472C98DD3572AAF2D45A70BF7061447E21EE3C3BF23
DF39C2D1B35B42CD5297BEBE6BC94F7C9DC6E61EC67E4F677256FED9064BD3E4
B51A71B1D27CA4E5AA9E1D8080E6DAB5310711EEF87C40859FA935B19524AE83
63B163FA8397BDFF443227FEDF7DB27DC35D89FB1C5E435DA0619A5C88AFC73B
89A2DF5E767C5B536BC7167A840A0C32BD57A14DE69A7D0D819AC36FF32F908A
5070F32983BB007437E3500799DF5E0AD3710A4C0000F0098D5BE99F2EB9C1C2
C444FD9552D0DCA098A94B3BF176F511CEE13DB7EFFAED7C47B5ADCF8D4700F5
7B6DF50EE617C00966B9A2828882804DB7477F4A8CF5345B7F3568B4F72BCE73
2E2AA5BC4B4C70E21F3AD9AFC3B8605A00D67EF9ED1F4D13DDAA920D45B43CE0
0941BF17CF05D2B777C11D4D844AB20C0693D1DDF00B27D9E1AA2D98A4A06CC6
D342AD8F644F4787B66CA7D861E7CE13FCDA85C1B0C9F94009768EA89838EBA2
7818F4085AB69BBA3AF037865BBD9A4359D9548C61DAD3B960E6F159E29C6BD0
4172606C421177B50462B69622FE73F591C55117933743A3E0E4D95B4485EE04
859D855D946A1B05E3E119CCF268C431C22C2D98327FB23723DBFF26D46BCC43
95520591A69BCB9437B962732C6617CDF17E5639C2A83904F0674EF81A59EC24
96A6EE51EBFA7426B4961BFA1CCB2B4457999BABBF8C0C4C2D7191012253095D
089608115294E0C64720B1A6BF37145BE6CCE597A1DC6C18506A665A17682DE4
DE912B3D86F6034BD8CB5FE67C38781A66B29314941405180D6553F59EB36616
07CF9DF8C569DBA2F99198CF3AC9389B42A1BF07CA735342764F95CE18F0A62D
90433B9F37039CA4D528166A0832CBA96B0BDAB21361E88E4813A8B426D57432
8BBD1D783C21BAC78553AD933A3AABE973B29AC7857FA4184A8E9212FB74A3A4
4301E577686F4B4E0C27E46D1767DA3C5BBCC80D4FAB1CBD9676B99C77D6DE72
B74D8515E33A6D7757AEF3A23A034F95A57DC1AD0847A09F0FEA32EDF8795441
265D4CE2C1FF875911A549BBF9215BA34ACAE15092E6BC5E4A113B5D0CC92209
8FC9A2404CE534A77D20B4A46C04486F05B2A78F39D0AB03043A0B172B5B2BD0
BBBB26287D175254DABE301186BABA9CCA54D0D301B7755B1BDA3309391A1FE6
070B5C248848F0CD4D770BA0F5B8F2F93258D0969CC89A2032AA921A755ADA74
4CDA144B42ECECC3A02A1B0CA53919E6377E67405E591123C8BE7CCC2460B471
D6909AD100AE18DDAC23C399FC37C663A70069C68EC588521524A07C947A7B58
8595C597BEF4AEF66F1715C1CAFC4C98A0C2FBDAD247B08FDA4EA473BA6A6755
1443E9E28E167AC4FFFF0E8BB6F73CECC525BF60380F61E594C08971E4822BF8
0EC3486469674C216661CF204C8131DCAF7EA9B3FD510ABD197BFC3110752D03
2E2F13CDC871B8C58DB92BD669FDCE6B7FDD180C84BD841F06D31E66F23E3AD9
CF20A30BE5C8104C61BCCA78C2A491E7714C1A99BA850A89A8E046FFEF7BFDA9
AC5D65F03BA4C221CC078913032140BE9430A019456AA6C3835DDB98CC9D75B0
F49A0B2BA39402DD8432431747083A5B2264F3230DE899B06B8002D071B29489
76052BEBF4CFD6E36273349AA39C4C0296185AD228299A4D50FA44C6C54F4863
C9D8D8EDECE803ADC30958097325C7D5B8105141DAD7092EAA3B5EFE2BF38360
359678DD9CB3928738B4F8A731B3E88D6863E59E7AF0E7A1F9BE19D0487B9CB2
164BE298DDF15F0401FFCF031D5F5F53F83BAED034874E50E67BD5A121603469
B1E56C95DACCE4AC9124F0BF34D7751D3C2AA50273CB47A161BDDA35924F3315
3E2912237B77C39E4DB33BF3E745A4DCA2211D956F4B6ED1451B8D496C2C3660
2A8047E77D9C13B681BB2B284AA6CF0A1E5914A8A7089B830E00639068B605A8
51DEB5F54614DFECC72DE019FC5FE67EEE16CDFC98170C7F757B67EEA4066269
29F44C30574C2E8F189C3FFE37F28C5AEF497B341A269D006FF3C07CA1561026
CBC42E044D4E4BC5C833DA794C9ED7C91F4753EC66D5BCE7D6F2F0D2A19C9F3F
CF91581406D4603224A32196C12075575732E6A28BB2BCB43E1AD72BF5CF5963
844DC1E9BC10A4EF916BCB57C1593DFCCDD7094772A99452EC8762A9D1F6DFC3
C5AB356A88E6B1E36B82AF1C0F560071CBD6ECEE8986F172F8D55F527DFF4EA1
15A2071E1267FE674EE51559C3A59958318D5FC8F05A463EEF901194F0B6C397
B62A17E860A57BC26E334F9362D70561A022573DF40688B592D090CE171487CB
872BF29C17026E8B4FB312BF5AB2A6DC2CEEADA531EF1CC34AC865F2B518DF62
CD11CE0E2E595EC1663B7ED726D563E40F09935EC33C12031C8DF222AD1B4EE5
9D476F6A0734A23C5AF58B18784D565A2FC3EC4432994DDF8175FB2F043371C0
BF281A038DCD124CDF46C979600B22568949C62E4CE6CF1D08320009F46AEF08
448216988F2BC70608EB2F00C5709BF7FA8CACFD3BEB0A991AED413E5CAF9BB9
075480E3EE1232C48F0734E5ED983ABAF6018A07BAAF5A900C11780C0CB3A9B2
CACEA8BAC8C89C118BDA4784DEC2D5432937C62F5D95563714449D747243C140
79FA90B635078B2188AED4ED1C00E09F1B52843E097FD1752DF68F60F7D23BFB
A36E0FC9F3BFFCEB5F49D24F8A5C138874D85F3786D86BF9D455B4A27A4A59A9
C54416DED447477E9B18782F09519F925AABD75101E4684277E8B4CD519FF80D
76A3AF91617CB4C8F8592CBE65F44436C39F00C25741DC1898C33D21ECCDDCFE
CC3DD45CA27B1536B3CAE3261AFACA51F918E4AAD80346DB9E5645ADEB9A4629
3DCE61117F961EB479BE67E2EA0F868E0B1452DA082F9CD89247EBE1E41C9BF3
9DA077C92C2567E5F736EB65162B424B0EEDB4CA31026060C3A0E217A3F0B249
CFF8EE8FC73B64DFBE1C2692B3A7F50D3E9D1A53D289AED6C5F2CFCDE508EB98
073438072A8059A9B03914C9734AEECC24A9F49409230FEBE07BEB0DB3987AE1
60A787FFE9E232B36E3ABFB5E2B8F148EC052A391AA133E4CB5098CD6597330E
522AE51539955B30C305E5BBCF77EEAE465358C137F5D99B48E897A6B23607FF
1F85CE828542AF2D0002390150768DE0FBA7DD82D43CD2BEFA44ACE008F8A7F9
D67F31264B20628C360EDF0692F42A53C2710D882F31CCD389609FF5C0B2E285
B909E629045F67098AEA6B81AF39442CF5C92CD122049DA47506774217FF3028
E4ACC23F5A6D7D5E956426D78950A80410684F103350B5797CC67440BDAC3EDC
39B8729EF3DB0696D8D32A4ACE6D476433C842B945F412675478025EF06F1D40
B867EFE929367F827ACDAE1FFDDF6B28E5E05B0601A8FB7F5AD53852F362BAE2
FFA412913F38DB1CCD8F4E469E056842FB76BE211220739B3E6208E5AF3BEA5B
778D1E6A6C76A60C907264E8B7FFCD1475CD9EEC4C208198875DD0863E4C05D8
C483099DC9CB6DD1C4C7FC441D2F82D8A3EC65E8B4277E46A8D3F9F8702ED66E
B3A3F07C139781EBF77F21E7391B17EC2E73D133B64A09A4723888796C57F224
6AD6E7C4BC1B3B022818FF28632D3591F3CE8C1B76E48C5FBA68990761394805
AE6D283441AED6F9B9F36849B942B550441EB6665BB1ECABE6A44DB8799C8224
6C70D4CF145AAF9B71C661BE7E684567710206D1E8B28D026663B9D0B8433920
CBD570603BD96F5FF4862FAC08752EED0BB92327E560D756A14E595822FD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
/UniqueID 5087385 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
95601766758820333028C2295F4A921FA3F2A6AC5D3E60DC37B9E6DF5CD60DC9
460D66B8E93A161EC35A9A3F9246F761C1F28896D4DC9BA9C340B9994B01A3A9
1D6C0C578E03073746FD99E759999611EA1BA21E388C22FF8902459B00D807BB
9835C5BB7C675BAFF7396FBC6276C3A5B49899764BD4D2443341847A8F99B385
7E38B03320DE0757E8CAA99B87CC738EE046B2AA090BDC5E3CB06077BABB67E0
136F7D780A832DE65DFC3A6EC9A59565D5CCBC40CBA8F247B5AE9D58F399A04F
ECF1694D15C6A59D724B87B4B48B5B08C263984E830E13A0A415BA5E5253196E
12C90E19DE11A9684EA753D3300A7B3EEB171FA951768694391729C826B1D7B3
49015974142FC2E87ACFF4E3C0AFB52B3F23D8C8BFCEB0C0310D5DA060500070
B68C278865BB423EA97183B2FE2097F93A52E4978C715DCE5669A4761A1E4241
20944814073FD900D48C4E15390607E6A819B7F0717C70A3F536B62CE8AEA452
AADA5CDF6C963C2138D0F5AB65C1B7CF062233BA35231F659F12C9CD8FEAC8B8
95B64E9AB77570468693F455989CCE562B8541A85F5AC5765A1ED15D3C32F865
EE0B4C079D2E67335B7C35157780621D43CCA1C9C933CFED4824CAC62F740496
DFDE9CDF2AFED3D500F6FF4AAD4FCADE4B9360414792ED49B79D62CFA3BB7E18
E32E23380A34F7EC788756D26D81914A6B07025758BB7B4E8EDE614A933CBACC
A315B43A68664FC477A12CE2091B6DBB34DAA2E8F4B44C1D8F273203D553993F
00AF1893DB2B692E12E4665C34F29EAA534CBC42E63877642C678A17DD31D627
5CC15E0859FF8D772250601FF9BB983E954B7D7A260DCE1960BA34AC72ABD8AC
C9DD8ED5EDD2249A671BE6821789AE287D76F28AB41E41515089202BD9464CE3
73F357B1031263AAB371ACABC43CE55CF74DE6A4C252579C7D104D758B9A4909
D161C3DC60678931153E465A5FE72420C6C24B1773D62C61C197D05D23E269CC
C5819A5908EF61C55A521EFDDB2F63F74FEA2FB4341958665D5E751AA8124F92
EB01BA16B918C92300615A9C316F7ACBA851D29A1A97E0E266358692C621FC3C
AE5EABB63D9D1D5E6C9E22C26BF6FEA14039FBA5B5BC6360999F0B398DE562E6
1AE4147D83AA989B3215749394F11F1C5D65A50A6BD18B42D8EF510505E3E821
AF4EDEBF4B029A89B109DBC518715B00687E32C3F49CA89C08C8BBB26F22D0D2
BAFAAB933011281E9E1AD583926289EBF9E9C33A62C020E18B1138F6DEE764BE
7BCE671788B78D3551019CD927E9793C98A20DE1809C90C0694ECD6294E0F27E
BC758DCF1843AC9E29C0919F237795B98CB36BF1F767DB8DDAE506E1DE8FE793
89B18ADCDD1E04E1E0D787619E0E53B6DCA1110E4FF6668B8C2CA72DF9BBE5E9
28336E2C5DC183CDEBDE068C889D6745FC1D8277996774492FF1A25D2948B297
D6F4AF04A9245021EA8844855F03DEFBFD1ED842E81582E5A079E7AFF43C04F5
49978CEF5AA789DC3386221FCD6BB90A67854C7066E388470F4638E47CC8F243
E17BC65DE1D60D12519E12C5C3C6A2BC0B1CAD00F7B54EB112A4A21354C0230E
9AD5572FB3B3DD56C99ECEB84B85B136F46A02ED492D175FD8D8F2626A9F68F3
B346652B8761094291D3E5D7A913F3A5EDA64BA1E8E1853FC681E0A534B4A93E
697F83A19ACFBA8EF9B44C2CE7AC63E8224B6AA4D27F3DDB04FBD8E11623382A
D2974CE3E3AAD90D4312BDE4CC9CD2D877B45C77FFDB85313EFF339B1FF57ACB
6D2EBE66140BCB993C34EEB86AF4E107872B901C0494AC7B47DDFA9F8C2F27A6
CB5ADCEB52E939A72373A1C5EF00E71DBDFB9A3E8F5EEA10495203D64A008F57
52259AF3A04D5C277DE75C49AB07DA3268A9D7A560B04A6987BC19321C0F6EC3
B7553C87501D4CE5CDF900EB7A4F4778B093E063B627DFC18220616DB2730973
384F3DF131ECD78ADBC59C0DA65756DADCE90EF82D866A881BD5C7A17F23F0A3
B5904D4D615CE5A7F66312FA6F038ECDA9B7FA403F40F935FC402F6F8C2593E9
5099B4B9E1DB25862DD674E628E3F8D7AA8220BFAA4AFA51E0F1282CA8942921
9C97A57656D1D539810627BBAF0580763488FC2EA941DDA7EDF746AF94F15441
EAC44A3631CD981D3904BB3AF02142A5473B586314B78954F6D9F61FD4E26674
0515656DFA45BEB8ED0C60A325FB53E1BBD702C268FEF3FEFBC434913505396A
CA1BA0C8ACF9B93AE2E25FB1FF1F43A5C6955B063F133CBE24DBA5FCE1627290
726CC58F8369B5631586B32DDFA8543EE4C4153383EA8C31756389F80E5FF053
7E65A12EEDB298C8D00D3F3B5D6AFE1FC35F7506FA35310E77F541788C5D83B0
EBB1A4B1A80AE5F843336C4A7E7781F0304A6879766508160AF7C2E6792842CD
3572D232A781A00E6A1AE9252D51BB6BEE236EF90470B72E5586D7E9D5227749
FAE4A734BE098DEAA4785C3E505996C9529525D74BF966A6B0A67B7B710CCFCD
F73B1343A90D779515BF1B66279A8C92D785EE6F0A2EAE00B5E1F60F0792B0D5
B1F93BD78BA8A2F5816B00FE9F01AC951275820340E0CD64D6F7E5A8C05F5D9B
48C42DD3F286EF6FF60DDF610CA961931E3D64F331756C171562D45485B0E4A9
A24FB29C7A5BA592AC27D4FDB1C6C070D279E994B4E4AE83B0BA34CEB973D813
E30C033ADA269111FF02568CC9A4DD191556E84A7B301F045E497B0A62F5C3FB
F810B1CC0097F1267E52DFF807A8324FEBF2BFAB564CC55683574EE8BEA7B681
7352835F116641E93925DA0447DA5F010E38166360E378329BBDBC3F50002597
C77C4516CAE4D8E45B701EACEFAA991FC03000856A08846092B60A9999E95AF9
E29931083A47BC372B421DB3BA2F24F65BF4221C95B1DCDC2B368E1F29033D86
A9FB93648965F32BC9F0CBD7137016CCA5DA5F719233435C727BD70F6D023BF3
D30865AACB3B9AF307C61C6230C3ED5E30127A42BF705FD38FA27F768ACE7CA1
2E73E074BDE35ECC4F953A649A5BFF61CD79171757BDAA30A2A34997B323BB15
BC69FE70303ED54E2426DCD7737D235E2B2AD77688EE7F2A6583DF518365BC17
C870A15F4A52AC85800B554F9773EBE27F237E0D4377F4267E038FAC78D121C9
F6B797CC13CA84B3168923D0F94FC4F63F94147E4B4006025B8739102F1D6348
3B9131FC01EE9645066EE244368F96C993746A88E5BB7E4FDEFE0E4022E5177D
98B6D9FB246D337EC1D047A3B5ADBE575CDF5D45BBE3EF4FBC8CA9A2A48EA13B
56D23D74DAD5384616D8AC5431A7DDD65C5E972121915B426D99A2DC244C8C9D
F1ECD430544377C1876C39740C5601B30C74BC6499839F9B1D9D0B77C502AD40
2367C2464173F3C94088272350535CC93A81D841D5953C3EC44446EE517037DC
34C7256C208548A8796075A9A94391AB00220E1AFA8FAF43C74829B2B05731D3
675FAC5824F486E47003CECFD515078AB2FAA2B422EB7FA314DFBF84DD3DA7C2
D14838F8B111E510684B429B1F00F5A2ACE8349A230AEB5409FD82CF64D2C2AC
C1DA6B7E54640F0075A1FAD5BBD0EDA94E41522B5936F37F5071723E2C990762
61E0123974C59056A93D58F44B3998A5AB285296C309DCA761A280910107FE33
0E8B68D008C2FB40B9A557DDAB03DFB0659CB06993B76F7CEC2E132939BBD763
1CE6BA7412468E15746001723A66302FC3022646F7EC7EBAD9A5E3587A93F7F5
A08CCACD51B79348088AA292E2883A8A881B8D80600DC7C02958FFEB7E3CDD96
5ACFCE13BEDDA171B0D328A346065793F7BC435EAE028F8CEAE3C9C2BF5DD04E
D08077B68353138E7D763C40D0D8D6CCFB69E71F23848A6F7FFF3664230BBB98
03D11BC23DFB0F694FE482577C133073772CFDC6EA7CEBF586153456DF663A19
2E05C3C9F95710D75855CE5108D88DC18DB6887AA409
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.1: CMBX12 1.0
%%CreationDate: 1991 Aug 20 16:34:54
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-53 -251 1139 750}readonly def
/UniqueID 5000769 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660F74BEE96790DE35AFA90CCF712
B1805DA88AE375A04D99598EADFC625BDC1F9C315B6CF28C9BD427F32C745C99
AEBE70DAAED49EA45AF94F081934AA47894A370D698ABABDA4215500B190AF26
7FCFB7DDA2BC68605A4EF61ECCA3D61C684B47FFB5887A3BEDE0B4D30E8EBABF
20980C23312618EB0EAF289B2924FF4A334B85D98FD68545FDADB47F991E7390
B10EE86A46A5AF8866C010225024D5E5862D49DEB5D8ECCB95D94283C50A363D
68A49071445610F03CE3600945118A6BC0B3AA4593104E727261C68C4A47F809
D77E4CF27B3681F6B6F3AC498E45361BF9E01FAF5527F5E3CC790D3084674B3E
26296F3E03321B5C555D2458578A89E72D3166A3C5D740B3ABB127CF420C316D
F957873DA04CF0DB25A73574A4DE2E4F2D5D4E8E0B430654CF7F341A1BDB3E26
77C194764EAD58C585F49EF10843FE020F9FDFD9008D660DE50B9BD7A2A87299
BC319E66D781101BB956E30643A19B93C8967E1AE4719F300BFE5866F0D6DA5E
C55E171A24D3B707EFA325D47F473764E99BC8B1108D815CF2ACADFA6C4663E8
30855D673CE98AB78F5F829F7FA226AB57F07B3E7D4E7CE30ED3B7EB0D3035C5
148DA8D9FA34483414FDA8E3DC9E6C479E3EEE9A11A0547FC9085FA4631AD19C
E936E0598E3197207FA7BB6E55CFD5EF72AEC12D9A9675241C7B00AD58FAF645
1297991B5D01701E82228D0313FC7C66B263BC79ACDDF9AAC48A3CBF42B96E38
583E1D059953076D68148DC8B6C9527B3A74CE7DEF788A11531F44120BDF0F61
0B2F3ED94EEBCDE4ACD23834C242AA4314B9EF98E4BE72DB76EBDD0A028CEA9D
B4C38C1F2D24B8FDE686832FE96204552C820E45B6BAF0C3308742AE2868F3A4
2352E5885B6D22FDA67371E767DC789661D7E124EAA340B227A0C18DDC533ECE
6083F45C1F4D64403C57D1E8B396097D691A46DE5912158339687EB99CF6250B
A9FD8F55DB943BF449A1622C6080711D844A5253E921E77244E4BB76DD2E27F1
8E03BA30910DF4D5291C5EB745C5BDFC12F42FB909BA51B06646B9449C7218E4
BFA21722D10DB175BD08E6B9731C4CBFC3BDB656A3A0164AE26227C6563D1205
9575185299697638C4C9C839BE9B52B1C7D290A098BD7693EC4AC6057C90079C
353EC613BEF4383898834D1F56F2AFD104C33DC8615511AA5FEB28A68ED6F81D
00827E959CA07479CF90D0890F6F424760B927A887828E0C283D04D9DE39B591
2942764711A8697249F00894F4EBFF310FE2F1B1F139D2B0400EF932B4A886E5
B056947844DBFEA59F4514D6B2F9DE0B1ABA2524E230034934EA221DE7A9B3A6
9CE7330803EA476385F0ADBD4F64AF63D92AB47F21CC91C83A5D5FCE916BE404
670468C6F0E5A837ACD41656EC5F7AE336CC1288CE384D86780E2564206367D6
4F924B93662357498DEABBCF7735945A20601FA81283ED272AF29A0F97F48DA5
BB5DE14D9770BE3271839C5DB2FD32FE351F2052D7B1DBE286D3CCE20DC5B078
B5FF40AE09591445850F3FBD0B044929D0C56B1055B4810584B6259C8469A711
7191E5BB50890E1743A6ADF1599E9B0A4839475ADEA712E38E3721C7C628DFDF
C93DD7F1DCEFE5257E5FF86AE56B41F45DD81951B1BA265723B5D6E9B3FFF9C2
7A27B5F5912FF0142523008C9C0C5798F560F5C6429C4AF54F679E9F38DC6EBF
E2963506526686ED9083BAE2A16F0F8758506615072020D87783344E9460A35D
D490ED5ED1C0336990F3C68DCA9C18D6AAA8E78308F0DB32BB7E6A77ACAAB42C
89FFDF799C5C78051AF1C15BF47A65E6B6CDE85024B5B4E8B466837A4A34A941
9244ACCE3D776DB8F2FDDCB150BD7839A7B58854C695C503649A6924BE0A08E3
4EEF273AF9AA39B0FB2FD69F0DE818A2136810BF4C24796728F4194145D7CF3A
4C33F54B43F4018AACD9E1125CCC515549535B9944A48835A6AE949A28684F95
0B0DC0186C95A7785D68FCB62BBB066A64B225DF6863F0BC3AC7A3B1D2EE745C
D2483FA77A83A80B62252A4E4338D8AE9F1863127443120C5B3C6E9C0E34FC22
D4E3D4DADE685310B117CDED4B3B07A8F8DFB0CB01A96D8F75E4B73CA5D3A5BD
FC19FFCE5BB125E99A7D55F8771CEB769CE0ED6970D3BE69FAB17EC57D23C1E3
323F64D17E04701576F42A0451EA57E41648C8826E50FD4E2CFDD04B6F855F2D
072320BC72D7A385E786EE8B9871668E3E4BF825C0109B3BA01F13D89479353C
FB7777DB4A29825EE5688448481790E14B082B1CDE4F288C801E9F4B3D86DD11
0E236D37387DB2B39635C57BB788BDDF4822535DCB64E0540935463547B822DB
1782385E5E4B2B87B060A1F6E2C935DF61B227C78ED957A6552E859A99C66EA3
BD9D877719839262B18274FB4BD32CEDFCDBF40FDAAD82A5CE8715FF2D90B9A6
54BBA6E4122166FF5AF7D425B735C5D60CBB413C5D12B2CF387E015701B1F241
D4AD77967E478D11C2DBFC5DD9D9D8B65D298FD5A1ECC5449F3A3D7DE2C70817
B2D0CE6045C20BF35783A57F3F89D89D8511792C89D9FB859BDFD364A4B3478C
9F4185DF019BEEECF85B82EEE47C7B4C56C21FCA8E2E2024B6981491238FE458
638069048888E94483C380715B459AAF7E195D2C6D5B4092DF875E0946F1B30D
B7B1BB20FC6B07283BBFCF74A057AB69D4B3C81F4212863006334484802DFEEB
2A36F874013718858169DE4ADCA4FF3CF078D7CA821A0B1E67403FB3F6F438D1
B780409843F20D69CE79EB2AF42BFA1A27A7DA117DAF71C4608E504EEB344542
F6D76D772751CF687253361BCDF62841DF26DEDA59E4BFD8BBC92D422587C8DA
58193E3C18A3D12CD4BCB4F8ED0C1A1751B1D86FF7C22B3627DE460AA096D8D2
C0E41218561A6069F516BBD8B30A39CB6ECC91A2AFF5D6A455F2327581C2403F
4BDDC09EC4FF2044808969AB6AA9E4250F449B0338078A7A9AE4CCEFEFF4996B
6AD297700A5F7047D9B8A4CCC6996C9AE5656C3D31C646CB2BBDD1539B95974D
66313388BC8806C0E068192FDD6A049EDD621F9F839874A3EF0B491A4D0C0D5B
ABBD5B7BD2B6AD00980762A95684ED03159A56681843B6AF1DA4FFB3F4FF39B2
7EBBFF981C4E168574B1DAEE25F5D082393AD73B7B22236ED9A5A3748EAE8217
AA39743EE3CACDF1A85BCA2DFFB62689FB0408AE5E86028A33C6238830BA9B38
C70A3460BF731661074AE4BE71D64956A958ACC7CA90CAF79E494D796B01A888
26C4EDBE10298CE234900F0E85D8A99A7A731D4D840DD95EF3E8576886227FB5
AC24A1260FA651FE8D53F4215CFC3EA17CA03543B74C641028DD09780484D516
60A8AB79AF5134808471876F6B9529448F91DC90305D01DC00E9B37CF0CD6D56
7233E8FE6B14ECE8C6DBF56699BE1AFEB58A868C149964CA9CE4B807AA801EA3
2804B6572D5FCC435CEE1DD2FAC1516CAA22F2161B4DE706D43C50AE005530F2
4E351FC0D3D1DD6B48234406D08BFA775346352198F7582EB15529FF8A1A69A4
819399FAF43FA39C0E581DAB224296E4DBD7758CA9EEDB33E9985B567DE59685
13CDF02D87873F520801A37AB3E142A90F26D559801672FCBC81F61DBD9D7F73
78E6BC6F34CB9846C721C84DBCCB5873678DFD84F3ECCA7598F0A6FFD230E798
E59CA32F0DBE5B5B0C0E5575936804ADACD9769F25683F93537EA66A1B8DA7AF
FA62D7AD215A17BC98EA75EB8A149A4045E6576D587A308684860417506DBF24
FADA8C69288A5F51C6FA42A5C63287C1143360AC0C5FCB531470C5D2526B6157
F952B5C8B3CA3B00C268EE8F427C18C492DA17833444C031F0C381416D5A19CA
D10F8ABC6E350A94D56C693812176324CB051E3A46E78C1FC70C48BB892111B5
E03DD59995952B3ABB6133EB1872BCD59433C436AB36CD220BB2947EF27AF230
004878D89B70ACE105A48AD8E7E8D1A10D82F9F2EF8663C42E973304844F384E
DCD3F4322CD912CF72F1E521F9466098252E1F3AB00B958843533BF9C1706A13
16E93C99B1897FF0395738420363C42F4E3E17638B65B87EA98D479DFB3A6DFA
4FF1E92F51EC08BB9DD2783AD2186B77B84BB19F116EAE822C9641AD5391CEEA
300002CFBFAF1B1A5684DDECBEB00EA13371215ED3D4D3AA4EFB177B25F58A2E
92C0A1AE15FD31F93F53835AF14F3E30DC0654E4A24FFAA7C9D345A9ED50D054
25A0095852F6A17BD971BF562DE7FB19322863D6ECD8F7998478F77568DC3FB1
58D409A9A01EEC6B0150F8F958EC0C18D5488AD9DDF335C5299D9247CB5F5A4D
6C2589E0DEDFD2E63CCEC0945D9547D00F005B4906BEFE3FAB025C30DBDC65C0
6D5DF51279465E0169FD20D7441FE257B6603C95893BDBBD0448ABD6C35F72E4
778096418CC703D6352460D18C72122DD5D89026A44382D2B823E8F687E0E591
70ACFFCADB3B40589B6BD5FF33114640E87E4953C9A5F794593389EE66B0F1C6
0148D7B8874E64A56B03D962D750A71C4A599C6FECFD5CBA3826196E7522C443
7672344BF3ABAE00B9448941A25D75F3156A76E9374CDEBADF6B58E5F7146565
40D3296182AC0A84480552973BF784B227C9AA6AE2666F7F01AA5942CFE0C3B3
4DABD8C38AC6C6ED8AF03E80573A0C9CDB7F93413A0D1F3017A5501C389425EA
A9AB5572B99725A4D6E8FE5044CF0D6F010A1DA4E273853A2BEDAF5CE07789C6
E67EF81A299DB0E373DF8A05FA8D58D41BE944E08BEFB8A773A2DB6CE9DC0709
324B3316AD5261321E49CC50ED6ECB0AC042C2CB7074C0901A08A9B690A267B4
7DBB7A010C20D01936DE98F042D53F71E1DB8C3E65D8EFFBE3F9FC3F37CCAED5
EF1D435A90A8442BD8E3CB7B62067EDA9D99C2FABC2C918F7CD7D9A21F538FF4
EC3F245D3E325AB98CEC4AAC65D627AA898FF7F7D0EBE506C199AD791E57603A
DE4900F3FD87AF4FE7F9FA21B0EE72AA9BA2B2BC111F6D7C081565EFD667B2DB
E60B1C0E02A03D38AF4B41CFE4248212E49859ED8290AD1D2A90F88435A07D21
5605F8A3E2BE54D2A095A3C0B27ABD2282ABA8918BC75BC30B5101A54DD85A2F
1CFB3C1D7F366255FDAF9D3065D9F96A2DD7D333857D3D66E89FDB5246D09997
4E9DDC2B16093C01E0F133F4DFC285A31C6D4CBFF0BA0935B914787D025A8B60
D169CE62EC3D77AC92A1100742DC108B9819973C832F0861B067ED240E856CB3
2496075BFF02F24D2EC8C072F1BED64D360933D496017CB5722A30D78330EF05
304BA6A5A03957E8C74860A1F7F63B895E7EB6C314B69307C60929BEACA38ABF
519EFECB9008DDB7ABBB38CA233ED4B04EF38DF2C35E9F3D0C885843F1A65A60
7A90E1FB680A4A27DCA7560E69F1660A6E69CB4C6FAE81DBC9D284B42389E790
AB6AB1F3C39DB1F8BA35A1A5A4EB5505C8EA368BA31553CB36AAD2604E759862
57CBCAB900800EF8BF93CDDF4729060BF3D6B5D74FDB19CDD1882E40AEBFF474
57F8738CEE6F9570C69220A1FF055E87C49F3DCFE69E7760BDC1A5BE791B4478
C889314E243463E4CDE51D9E7C53168F736FCDA205FB89BE0DD91D3857085051
E44D43F08C5FC96418AB9BE2765A3838EFED98B14E14D99936FBACACE41AC42A
2DA10C6ACB3BD92F9F0F350DD417C0BB485A27CFBDC34CAFB0D061281AD5B70E
250D940B166893A74D0F8FCE5F32A0546F8ABCA5409A203B8160DCFA0274986B
026EA0D1714BB6CE5FA890A847B7AA417FEAD9B1746E3A9AEA83A2B0AA299214
F574FF6D879E845919CA2E9CF159F1A6E3CF0581198B6DA710EF781D1BC4EE4E
72E7C601E35F2BF38CB795094E0068D3CD159B9D9519E7E1FC65FDDFE4016ECA
C24F836B8B25F8D13604E23C23136C12C518586EDBAF063526759C2A08D67D5C
0F7F9D2D48BA0E3F40EEA16AA90DC6177761948C069D48CFC5C1E3F8AE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
/UniqueID 5000793 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E2A1040FAF2DE1FD6AFD5FD97EAAB614
956897A7BC784E9865B00EE8B49B918E886049F1F4939403EADAB83A4D8C332E
2221AF8F6F4A4954501CB6A6268AC96F7091245F034BD65542DF47BC7BBAD667
1EE6AF9187E298CB7AABA58E3FB5B4C7E86616C1A830A4A937C265CC28A83EED
8F3C971D6DF5A50A615B713F5332E0CF05C754FD76916FECE4DB2807334C34E1
E2418FFF1B4429A564AB857F1E23337C75E729645AEBE7F8967630A40E00F8C1
3054F2BE2768682E50D0B43E3CE3897D9EE7257E77F9894CD4395C21585D16F8
AEFE05217ED4F78C31FD635A00CE5D0DFC7B0A6BF9444B62C836087731D6D205
24A45B3C8D80983A67377EBBEE171DE0B4A21368F9B83AF7CB286D8389785E93
B11277C65D4D789AF99B1D7A3032947A51DFABA0DA3B94D8D4205BE243264127
474D97F3572385018D62ED4B1A399B8E4AED8D7C329F109DBE3015A727DD70ED
6DE4DB326C4323F499565020467A2F2E305D6C518AC9B545FCA2489D0174A32C
54EE34AD2AE8A098D31741EE76259A889640DCC36A5361B812438E7E9CF6405E
EFEB0A796131EA6FFFEC99F667783B39904AC4A1A00DFE3907739D7EC6A3BD1B
16ED4B0620CD94F6A13F16C8F0CDD172CC4C3EAD948D63F21961A700E9BF55E2
2C89F5445ACE50FFBBDBB84F74CB7B5F8460E02F271684561F9742380EE8DF00
26663246BAFCD57F6228C9A0F2E38E993B049CBB3FA17829C8A8DDDD4B994DCD
B5367559D77AF14ED9850C228DEFBFE7E481DB8D3F55247E3CFBF0C0DE305E7A
D2CCBF572198076D91188DBFF571CA6B3E11B616825B6E694FCA61EE06A1F883
E19D56149BD0316F876EA4A51D0B7A3A391D90D7A6656AE18615509DA8C46E85
898954208A8DE6D21D208BA9A97B19A237B97693859EBC1460DA7A24A0C6754F
64E905A682AD9615749D7D09F69D5491A28ADB2275A948DA705872E8F697B074
1274FA46172BDDAC3B10B0C8E48D5A365C64AEFFAD0814192323EAB43EED97CE
537E56621940EB73504E9CD1875770C198C0C332A0676607D6AD86993B9463DE
EA3FD2C7F3104CE87C3A1B4BC2D791D8563572662A67D2F5A6F86FFBA5C6267A
2A20B8CC7B4C8E6634555AB3089CF252C4A039AC9BE444D60CC80CD863F4A967
A0D2003EE91BF342F4087D9BC4A2C3E7E8059B659520702A948C4D12DE3B5161
BA1E06D1170325C52CFA79C49978A94A5C703744E902842E0BE172C73E412A6B
5662F4F6CB7B54057A3CAA4A5B69F5C146AB52F983AB01D8D4EB2C0D60FA22D3
8E5BAE77FC510A6F229208B38BD583C8C0F289BB63A0C94D5BCD16CF26E00CD6
3E50F310EE5F64B6820C9DC4FEFB66FDB6CAB33CF641689A31194469642F77D8
C4203897CA324624CBAEFE726FB2705EB452AE9561FE96B9BA9C4B2AABEDBD0E
90B1C8957CF80035604FE28F208F3DE9FE2D18383311970D0AB6EF7DCE80AEAA
EABEB919AC854CB6288EA68253851FB70ED485893C850B893F591B685402726D
4B7AA4131B0FD2BD0C6CF164A68299D90F2D080172D771A58BD70503360F1961
A6640445682A4A22C0BFFDEF28EE0C55E05875C8FD5B113C9460E395F486E4CF
A1145D744CD1242A1BB27A9C753BFB71C018EEC837BAAF31375268A07226E4CB
6286CC550972E3966D43112D90FEEC51D2597CFA932EDB556504E1D2E19872E0
C0EEE6B50AC4F2D5F535CAC40B686CE204AB0D33BEAC17A35E0E0DA9CE8E0DA8
E8CEC7BFC6E822FFAF83BBE8F6FD90B66AC35FF4B580E99D428EBE244997FDB1
3FD925535D5F1F134CA2A6355E2AD21799BF6C5F5F2F53DED023DCA8A197C587
37E8F538D2B7C1DE3665D38A47BBE65F0DE9C848D760BDDFEFA0EDF327AA68B4
08123CFE400FCE4A2A2BD88250D8D5B6D5430D7D7E7028509BB4B074C2A42AAA
636A3A2B516B5A8F25CC71F2787A065F85AC50FA72A2D51320E0660703A9D06E
E1B03375B483136076B541C017BF2074EA861C9B1E643A8A76B33CC654169ABF
80F872FD8F924C7F57E0459AEB48E75863BD657B0063A8B965C444BD6A3319CD
BCCFB2F53584524EC4ACC0CEA467654088E5C710E0325F731B4FD47AEA9861D3
EE2645BE7D9A481EADF7DEB34FBF91F1CAE1712ED083A8A0DF2DF70C5BE01B52
E6A3EC92182CC961C5803EF382984ACDF81F17919FCE1EA9A853D34260748C53
F390D9837242DE3C9DF61529FAACC9FD78D4EDEDD718750D75B819B305AC2758
2A4C451CE297C0409F5E30B081E3C85E5F64BEAF9C3B842A4F3D8127D176F8BB
B150815121C68AED423FC3D0570AA1561331E3A294DFE58DB6ADDBED8B7D8DB5
DEF7AA27728B51972CCB8B884EC3E9220E0A263A3B323D0CD04C1CFADBB291F4
B2FC98587293E22A7636C6881BF96C4F32AFC22E37A8DF08F8D668B0D8093B1B
1E38C1F7CA97BF1E8C8ED9A76E2D457E83567F6047C5867D2E8FAB39D6DE2C30
19D3AA714A8AA390A9FA85CB7078A79A91377E09A0D819812AF0B698BEFD2EB0
D53DCF93A1C4E6CB987E25DD2D22DC47C318D89A50270C4C8E9AA42F9F83B7A8
A71C250D8D5B707BAA350CE464EC2135F21DE83D22A7D35DAF00D3E9CDC76C6B
90420B40CE7E36A230AD049DB40754C2A6A060C9A41B7A1882EF2B9388B1C08E
67FFB47DA49D0BA021863115D103C9D440BBFFAE89C7899BC5750C3FED416689
2E752A02B2F44D26F1403CD3BCCF432E8DCB9383AEAF42E9DA95ABCD8BAFB80A
D2F085BCE8BCB6878F7C178DF0237C4388E56DE4B921B8E9FE662A76E95C7819
92D426A812D0D4B24D0A40AF6B65AA229726B270E91EBAD8C84C16C8FE0108A0
9BC00AB4B1D9A236B9F18FEAA1AF99BD7CB5FA79AF5B5BCE707B6AB95B73C9A9
924EE4EC0A96580D5E59AD3FEADBA72FBE751177BC8B65F50FD759C95E3AD4DD
40A67C1914F1DA01C0B2BED9C5F5F3E9DB532CB698E2E95C9B18AB5E6410F92D
618E01C757CEA1953CF50FED69A470E18DA75414F48BB77AA23988D7817F1819
B85BFBB2A5859131F20777A1F8E778AA03CF8DA7AC7C7194F81F62D08BF59A21
012F8C11484EDB969CB954BA4FCC5C1A40B5141143693E847B2D01C378F999DD
4EFCF57B4AF8F8D74E099DA293AB01D12BE83FD61672C6950C36700423368AC3
EE4A907F88F04DEAF2BE6B64AC306661DA328290B383751B9F2B28281B15FFD7
6C0CC6223793F6CD4D850D7E956D5DB9B51AF71990D9A7292CF484914E475F51
9FB890ADC43A64DF501D8249A480A195A963BFD8062A562B31F41100480E8FBA
BCEA51A6DE5748CD7A148A37A9DDD91D478809F80974514E05AF01D73D1C1511
784AC4C06B208661D078AE4687A88C38235D1907B31E7DABAC77350B7A144C46
501FA03FA270A42B4D4135AF7AEA202C996E181DABC91501F2AA6397EE503E1A
DD34FB2F4EA72F8C4136F25D90934F5B8A161B6771C7391DF06789FCF9E02CE3
CAA98FEC0DCAC0E2C56EA58937B7E632478121AC3F7CC2B5E0A048C421D0BAB1
79F066355C6E0C5C5761A48ED722F0010DCC344AA22604286883F211A3EA4C53
1E482140A8D399F16DDC9D4834D17854CC04BBD37C3C2C10E9EEA4AF35BF388A
F2BE60C6B095A5D4C20985C8CCB70EF219113B37AFA06276184CD1E9AFC446EC
6024CC47A38DFB8FE0D33628AF717EF1AB15141DB8CE22FED3FC809DC3B7CA4F
D1521FFB07BFF23DD9482ACAACE85BD67835CD31CB24D90A0CE973B543991D82
D5A877E09C21BE5440CA86C99BC0B473B7A7555D7812C6023621C13AB3DD30DC
C5D5D8D8B30275C67AD51A7517D674893B29751CFAB130D0009EF135CBC20F22
89B80095CA7CDDE0B2D2D96BD6D371FBD5EE6DEF961CFCCC2C47013FEE5FB65D
C80182CCB11DC30AF61B9ABCE07853AA5E7C1BB210F3126CA974EE9DFE92F1F9
3BF2515249CBF048EADC2E6593D97DE78FDE0541C7D7C2FF5C1342A853803BE5
6EB4150445B6B702B2EC2CC6DF12E32DA5E392B819E40F57D2DAC7773CFADC18
252F359F10791D7F316AFE4175044D6AE7EBE1978A89F7C738D4A0B394420751
58330B6D7DD59411CE4C3F01373294157FEE659A79EA01F37322E2070DA925B0
6BE3FC23A256043E05B0BC0FB6B20705FAC40FD52A0E2ACC67BB7B76791CA219
3C4A83AED718B9A8D13FDEDDB1F3925A18152451F525A427E3CBE855C21383A3
0094F06C2396F2BA401420B0EB172461C9BE4BF9A1D11754C47902D90E0F7959
D4E9A11D37D5D0BFDA2E9DBD1A066B9F64E78FA283FB321EFBCB7ABAB3770249
BD9D36F2F26A58A20E39EE6D1BBB24A4C814DD5201476FFF0B68203A73DDC02A
97844E449697E9C42D49435B523097651EECB9D7AEA2563C401F4E1E18B0D3EF
7007B4BCBF10E6F8B6316250813833E2C9811CC3A1CD820115A48D7EE379115A
17C4B63283499DAB034C12FF7E52977B51617CED22735A19DCE40F47D3E2B6B4
F7B0D0E7F7BA2331CBF1633C44F686B8391EC50DE19B1E850E444EBDFA0FA697
D89DE149DD52177153275073EE11146AD9B084F8E58CEDDE156503E8BBDA30F7
2429DC4AC66DBA70869E92354E44C9DE924E6054A766F6FD5B1F44CFBA005331
4244599FDC39C10B4C25A0CBD6D7BD346A98A85DCF72139C05706DEACFDC43DA
91218360C267357F7EF42E5686E56F5029D48E397EF903B6C3A3B2585A39EF84
B55473EC03BF4D9AB664401017A5DE63BD6A8A597E86FB0195A0DEB116E8297E
560956C88FB5BB92E3DB320B3BAB5310AAD40B5F30387F24EC1CA3C66CB1F327
8FE0AF274A5858A5A11437CF0514F221A58FEF818BD5BC1F2BA478D387E3A718
D0D67506FC8A3742EA00D90B187B975FE488FA64BF6024CC4966BB2E4A94A927
6858AC66192C158DEEF3DBBDA0F4F2F74885880F5E2763F23873588B4F4EE79E
80F21A0092F9AFA929ECB1F3AF7419B7B801598831AC8DB6D675FF533C92AD86
561D1AD13F47FA3749E98CC04AE97DD701A7B11A52978720EE173914E3E24676
694DB1965D0364F4C088BD4F3A16CE13F51BA0D86BB41549CFE38EBF2AC414D3
8F944E3266145AC817E741D8890C22EF29EBC578C48AFE50C982C6739B2D5E0F
9742FEBDA03A3468767B1021FC3490A0799F4C26F4B1C76FF54385EAC8019D4F
9CB450FC79B0A63871B76DD3C8A63B3D068AE046EBB743691AF96F8F0944359C
765D091F74B8F730614798CA347AB2226C71D85D662F76C91DB1ACD0E3AD216F
E1309EC08E245E576E2C56F8932269980BC364FD7796F179C4836880E1328889
3E062C7E2C57ED6104FB0C4A7A826A8B3B70FFDE189F026581422546CF07C591
FBFBB3B1D6C6E0084A2186C895D18FC6D982C200A2D7020231BE0A375755D92B
CBFECB49577BEC23889E144A6C1504DDB3672CC1B6E55E633C6E76B2063B7EDA
BF065C49380F1998729880D9E427273527A2B14BB005DCBB4C1C6FE21A0CC4E1
67D8EF83A39F19954B57F29D804FAD3D8F141BBB76E1E6B62B4CAF7D57C9B803
8D2936BC59BF9F7B4A97AF00B5E4E3D7456924866A39BCEAEE704C6634A23994
2C7E68D78C437BCDFF0F6944E527E1C3613264AEF2D19B1610DE743C598E4FAB
0E2A06AFE029041D68F14B9BAF8C573E04ACBA91B3A0D886CAF3325F10B86B6C
029C5C3623E8CFF67C665F05CC17B08FAA2B3B5EA424BF84155FD4483C8F6BDC
9722A27EF9DDEE7211AEFFFB706BD3D23FB35B58B430E6888E6B5CFC4C585699
4CFA849717A4C02A3D828B27CD74C598F9DC07553BD6F4B996085F09FF0390DF
C21D86A47CCD0AB2D4239427C71CACCA1FCF8414B1422C448250781C8BE20286
CDD4450AF74134E1565F7368D9ECD1E32AE4C8F8861E9CA9A52D350A3A6227AE
56388C88E90F84AB811B076FD82632391D2CD6DDAF09E81D6928643AB85F4B71
BD2D5CC188AA3BDAC46F58A59EEA095DAE6679EF24EC6B55C0830A66B1D9D7AA
57AC3CA214F3A833AAAC24A3EA9D047D700A8FB0F7B2FB1E37298D585C713867
0DD62154FD1366FD83149475E0B73EDD316E152F21C937B6E402EB7EF2AC9815
9BDAB2949E3D448786EEBB69469A2DECEC7E6F641F94A9CC9C501DD7C3227732
C833A26E5C33231A5AC3638B660D871D5FD342D8AEB06CDAA4C6E88B47544FEE
B18EB78DCB84A36822BFB1A514C004887E7FC7008EEEFD4325661E3099D6A48D
FF0DAD6C2F0EDF2FCCAE2FF974726353806A34E178C281BDC60FDD639C3E8E4E
8996717EBC3A718177410343E62631A452D5FE74ABECADFE95A9E39315A2DEBF
8CFA02FF2D3C5C6964CD1CD9D6A5EFD304F20671D8099683A29C5F86DAED16BE
31407FFEFD6E3D4C63D56AEA75FC5532DEFBF87C0081E4B432509F8D787DE7A9
7090F6A2481096BAFA4D033590266463B0D51A8D3C3E82B16C92D0BBB2A71F99
F6DF6BC8872068393C4D473D1B7F7D12CC4BFE4B2E4B19D74042C7020B0B0555
61CE5E7A02C98BE7BF534FC01410736BD602B009E28A5DB5EB08B353C9166805
10A16EF0FF89F16CC516D4940F4FDC459AC12E9E1D409ECA2D6B4163F122D9CB
C61B156A3911F3F7A4581FFF880DB542D06DE11110B566837588C66DCA583032
EC08CE2D0E64A72B23DD8764AF05AC8CDB3B91CA229ABB6C2816CF89AA70EC2A
E6984CD29A8C4C1229B99BE02A228CC037646A5BE8341B70DEFAA7DA8C405EF2
70C6C96D3E15F4D5B9F34B0424ECC95BAC1DC709E9DF7EC7A0E8B23F7C64D843
0F7FF7D1BAD0D819FFC1796A360C6E5F900CFBC0EC4BE0DB14BEC44A0E3CC4E6
CC22FEBCF5386A0AFA2C1CC378AB6BA29009D12EEF2F7C4415789BB5D03C6EE6
6209DBEFD07BEA319C6911F6203D7253B0857806FC932CE92330BDF4E72001FC
467523B8DD24D62198AAF16EFE600A37BEFF33C3631D245FC5E7D99163461059
7EA5EBED28DED6F0B64913488AB7EDA9B40104E6F22C82342DE8052529059FDC
775EFD9583C19EC8C2D1DB4539878BF71B437A14FD834E205242907D0300CE91
93A7A972CAC8B67BCE4822885E22DACE80E5281827304D3786ACF9B56838D5E1
51DF68B5AFF953C3BA0C077002651FB68516F7914FF2B1D6E9181564B422CDEE
8F75994A872614BB8045117B09F5088541885926D0F0796548E49EF0E5EC5926
B429710A54DFFE77678BD80514B84A4C26564CA203B1AB74D1F5A392ECEC839E
823DC8A2B94A8B4BFDD8B0E30B4FC95D143F47699D2AF1AF16A23667DE682C51
60B04790E5548FBDC98775E633DEEE73B92C30799347807D4D4EF60E6EC10B88
5FD465A944C28DDEEDF8DD0B28677E84E5F62F6CBF0B6210354BDAB4209806A5
127BBF2FC5A8050FE3732F9E8828E494499AB465228AFD77BA2E444BA7377898
E89358ACDCD41ACBD51559EEB11515D44D4C2ABA7FF08754F4ED264E29C13071
9F769CAEC3E306FFA3A29C8A2753EAF475E092A1332CE0A34566041703C79904
1B8ACAC2ECC429248534538726D2BAD4FF7D9D9CD5893CE61515D62E303D4744
94D6ECD585B3E59DD0EF256BD5603982067318FCA056BDAC869007A956944CEE
8D2B4A3E25E3DF52DE8779943E5897AF1B510755EE7FF4F801074023FC0FB4AC
0D0BE5755C8B7962BFBC391C0E892CA422CB767FE87332E5E23AF35004595C5E
64C904B01442FC84EB77DF619FB2EE93CD78D10D2A3568D7251B3E6D5413FD68
98C974E15B3522C9506FC44637F9316930BDC57575595E91D5DF2B9BC193A9FC
C1AFC8098EE4F58ABB1D24DFE24454083C1D4423B7FCBCEF4191A277EFB948F8
5E34ED55247C7CFE5E52171F3C4B320F6BD4E89292BF462BC4A9C1C634003AF9
0B0FB59BCBF4F19E4A4530812D962E535C61C02A24844E14DBE86A6C7022B216
5CCA7B1126ADEDEEAF2998B1C889114BB833D167950AD4D41AB5FB4BFE65ADF3
4DA3A4CC99802DE6E4E8E95C118ABE4B11FEC440B9626F5DB7A30E748BF45ED1
9279869E732F4C7B4854BA4046DED0CC47988437C17C3E4124229C9330E86F24
2380EF3938D34A730B80FBD41A3090D307D35DD917F725A328C9BDBBCF293B75
840A108DAA58EFE8E94172A7957CA21939E05C34AC98D51BC47195985DD55968
CC1A734A287E19D25F33634E540963A5AC6A988BB93289580C8D37C163B6EE78
2A4DF9FB2E1AE16AA02482C6C0C853EAD28CD9644B969C36FD0CB919424C4939
7CCF64115F38A5BE4289B123390D98C92A272A7DBC5F336F62D9633BF3CCB52E
259C3F36F647B356D0D4033F5238C147B4FCC652AF7587E4FF3B5ADFAF50E772
DBAF96F388A9A152A15D9B2FC620A7EE83B152A1C0FD36FB9A19A34F53DC5F5A
D610893768580EDFC7DEB30037889B09070727B111C7F7C9A0D724046454060B
4EBF6103D500CBA558C5D7B13F9BE7F65476080657106D07A08484EE254A2BC2
9200E99D12429AC4D010D5A133632AB3BD8272F4285A8EA451E5995809A5F836
0794A6952A0BA8904548AB7BD50C7C695C6879424852C23B514DB1DB82984812
879E32FA8A3F03FF4D40C0BEBE76B60E77E45A487520780D714E483EF4019AC7
DDD0B7C8817653C73C1A57C527A6F80F6404E8A3A9CCACE706D8D8665A70AF75
3F5E609F879185336714FD1690A8C33E79225F3444E1D286B40FEDF46041F0DF
208A6CE4A28C87C982293593EFF56A233A62BF9F5F60239756A5BF57F898C6FA
F8E14BA4035052CC1931C0C768DE90B31B40CBF4A4A5227AC9343DAD2245E96F
1840967FE2E6823823FC0DA2DC279703F75FFBC7120D56A1A07C37FC4063190E
D4F59B8042D29C6A52F807FFD152D065A008CFD610A83EF22E9B37E4A060A3F2
F1B36A900A686412565FB62AF1EE595DA812AFE353EF16BBCFDD88D85FA789CB
488375011A276D9D12DB0B68256BCE21092B862C6749EA7DD72067BA5DEDBA58
70D5CF62F5B556E71B9F778FD062DEB814EE6EDA8AF80C38985177190FDB4D7E
9939D5BC4757D64E319B76098D2F2CFE9664773CDA64C5903999241BA898AE15
8B0982018548C665B06AC73AD8A69D00CC2AFFD03A4947E69FF5AC9EFC96CC91
1C399E866688607C31900B59729737336178223A03B7DE427F3D3C774827148E
2ACF36EA968AC7D06921CB31D2A848D91BBB4DA73B2D18425E5DEDBBECB59845
D9AB57DB102D884CFDABDD62D349D79EF2120FB09BE994F6BA323E2DD23296B7
B18732E64BEFDEDF7656948269FEF3A87119D4F998FBA85C2E780A4579C27B5F
65CE0475A2BB0178931C57928C0018A70E05C3285C1F7C6099E7884BEF2FC009
D0B78C519BDEE6B6B4938A912F92F93E8CED3D1265CA09DE0E05FC83724AC44C
A4B6EF043237BFBAAD973B9C7F0027F43293933C8BA1870DF1FE5DA8BB788D58
21AB2882D67FD34242D403CE58CBAC1027CFF3BC1A4B1F0435DD4F44F0ACAC06
20DC38A1A14BC3522CB7EBCF140F8B883C8D0BC83E51DAF868CB01514FDB58A5
310D27BCC6732F14E16500B0C0499CEF97DED9E505D0380C6E4FFBC11074FB5C
43F55BD0C481641824B208E241767DEB90364FA3A3042D7507E6CA74DDE887FE
42FE89C6B6036D3FAD0B59C383D294B4A3F8742F2482FFB02EA1D47008E094B6
4E8D1D531ABFAE91417DEBFF0258B499EB4034FA5802E0067A7509C2A0D454F4
CDCA0C9732212365F61471FF1D85A1DDD869DB5B39DD6E385E83D9C78F2BFDB3
E2ED32E0882BA50BC9ABA38DF4B4CB7A5B3D8B72D7E687604E42BAFE8FDB6693
5ED6792542CD221B9B4E9B2DED7C180B557A07772D0411FF6682484350E1CA22
1F539791B564A7BFD5B3F9F889DD80CDE8C7DD911150849AFF3F85E6C7B95D02
7124BB734BA561929A81253C1CD4E27BBA5423BBD1376AEDE6E77C890E2C3AFA
E77C534F2939AA2405B5299F9116036723A584AF7E6753B0FE14D9C1E6495E73
6D9160F4F4D7F3966D4F008520CF43330123943DDF846C57C751716894E351D8
6FA3BAC9AF29AF948382B47569F9207DDDF762BBD0A10D3B153F07F020B69A34
89ACE4E146B877850414E2456AE8A806A9E3015238E7989D0FAE1C3C3D2FBA93
D80CA6416373476C05DF6A11D9B628A66AE5D207C064DB69217677F43C81DDE8
1B2F8D8EF32625AC0CAC035C7AF280EBCFE2E1826730418B5AA45A012603127B
25C4F4574FF9B88F4D8915D7EA2E1FC4797D7C1F253EE5FE8E7D1002D6E00891
DDDCD049D2FAB39E0001032F204E5B2C7332BF22C513FDDE56EC476CB4E3AC57
2ECCCCCA51B007D1079090A507D55D55806F89D257CA7594FFADE290BCC7CA96
E46EDC8DB0FA921A29F22DE443B0A9E852987445E6A7E353EE5162A7A22A36D5
C54BF064DB2CF75007184520A4E64CDE412A88578D6F17CC734604968BC4FEF7
E10F874D02E6D58982D9DC9A3993DB69E53787E40FFFCCEC3C88C786C40B676E
0249444EEE14A569C734FA5FEB10FC30BDF35B740EBEBFCD1AAC1A1B01F269C4
628241B7E37EB9B31F2F5873261F2540D0BC35CEB4CE9673F31932850B47289C
BD89F386102391045A612DFC9B39B0D31B4BB5F8E959BACFECC3AEA2007A4F4E
B4A0B596B713B546BF7C2C5A4621010B163B4562C6F82C1FB777096EB043B9EA
4A3F34BD2CB6BFF4BFA7BDBC7275D98B54B8827C91B0CFD4FA6C2BCAB0E13E7C
1FC07E9CB945D662A48296D2566DA2FE874F2EAF2A9C9C90FAFE1EE407AB2B8D
3D4BF4E8495EEF63DF522271BD67FBEBB3C63A9C11070FA5EC79ABAF44AA354A
31FE7DC65A581BEFC75AA24649C797D0874A1189BEE209C35A25C5C3E28EBD0E
5F7FA183372D641FEF36CAFA85879D3C1AAD548BDB0CC14EF307DAC0DD0CD20F
801D02C152FFD03964B1144EC2BAEE40E308F3500FBEBDF63F45967580EE51BE
B144AF9AF9AA5B28DD45D05FC812930133D4A82C72CD0F40CC76BFAE0E7C4E3E
22C0CCB49D1CD1CE2FAE537B7CE31627252710E3E56B80693209ADAB6CBBCF4D
B350B7AA6E8C592F66664CD5E34D3BC4C92A43FD304F983C86A463DD06140BE5
D85AFE45894BADF143FEF1223168B611C3050337F8E4113293AC46A586B7B43E
AEB566F079826C47352AF032957793A9453183B1BDD3A1E81D1D43BCE5E55D85
B075036D84E86A396FB150D0DB6F244214AC018BEF8517609E9C6C9B0A51D162
94034CEA9D73B840521901B4B18AA8012B2B288F761A9B99C82D28256DF7DACD
22FD2B12337BBA338F67736160FCE77BEF0AB13B21E2C0B1AD1EBFF184CE4645
0C13C295C5141429AC05A8DD5AF58DDAC0B338770CEA1E1D6EB5AD6D7CD1F5AD
DB72ACA9CE17B78CADCA4210D5A62EA03DF37CF729179863E9797CF320685B19
7AF5BFB61C68E49DC47733E0884DDF2CAD51FCA14A38BA75E49270BB2BB79CE5
B3176999E32C5575173688D311F9ED555757B2BA8C56999BC2DBD3C176AB35B5
90933B321E61C4A5428C0AB7AD493A6F3A64883071C3391C8BC3AEDF46411A04
743E90EF85EA5F7E48E1FBB22E34E0D876454A7C59225293F8DB79765084E4AD
F25B95531E67DA20A5E452E4C5EF3FB70C7AF2E2A1BDFAFBD543ED4B9C601160
E82EFA8BC5AB997474A34FD14A1BDBC4195867D22172C41454A9675B6887746D
53F732BAFEFCAD4FB6ED41338BFFD0FFAFFA37C252EABF7639623120CE0B9993
940B892A739181304DF772BC32DC221E6E8A71EAB28241A28B62485EC35D3D3E
B4C57D3B4F672D2FAD801B2B8D00135BAEAF6D89869CF1239FE26E82E99B07AE
F2CF98F4FD40B7E471F8040B2D82694610DF7F7B63BECF1F60995D863733D848
BF0FA51CCC5C006B148092A1E9A359F798A4B8A01573F39DE8876B50C7A4FC24
F491E17BD1298FAF82B2EF630F3D76718FC60F1AC44C07BF05B53221FDE6FA88
6D83FC3C3DEEAD7B3A8533E3F97AE96CC5842470F5805EF2B44DD8A9DE4877AE
47B61A55FE51765F43A631792DD5242BD7C66796BE3105EA6C8F6DAE0CC84891
A820DE4AA4D7DA341BC6F38C183BF3AB8392CD670CB001D4D1095D0AD65E98A6
E5150EA2B7FC2A1A272B4B46133438CF04C1BB2D41BAC65B07ABC6C4A54E7FC9
9DD011FE3EED5E2CD90D9C9C43EF4DB0FDF0C883CAD8C1D102269A118C059212
92B4BB591171A670310B00BE214718DB0707AD079ED9826970CCD925563CAC4D
95B3B990EDA2EFEBD6834E113E95838B5C4FDAB65D86E32D0ED7688BC1D35B30
62F31469FCC60C294C6F52CC5A3B602E00A75065C36822F50BF54299E69948BE
ECD828F2DDBB1926DD092F6EB19E4F4A7AE1222D124358C26E582FD62210FBD2
D8A5C4FC77ECD2FC9F9754A2DC1A69B31A0E0EB15BB19A98F12F6A85A8890ED1
C1E8A42A17FC58FC52EA73C626CD1CC5DFFBAB3DC5E6F6EA0A730A1D21830155
DD712F3B4AC83E3EFE6896F68D0FF369C9F4C8A8DE22A1780BC9B7162C171E04
B46C0039B2037E111BEE0FCDE44F8236DC53806FBE6579E9A5DE0E215017C2C3
657EFEB5F90C6518A5A07494E0EDA0E0C310998D5D1960363621217FA388D0E5
09EFF2DFD6DD98E2E6EDF81F3F172804929617EFC72BE8B778363BF6BFACF75D
8A2130BE9EC224AB298E8A7804246876686259B55D8BD67A42738366144A1030
7607EFC7D48AD16173EBF355E903522FBE7DD9388267E63A0A97CABB0532DFC8
870B00926E6AB8FFB0629810041AB7FC721E199DFB2C7A2B5EF9CDFD72A9B551
4914C178C486DFF96E5A1F97727BEB2623DCE143C4A7FB34368B7180B2A05803
C4B9ED8355C74940B8D0C8B6452AF7EE894AD64D1EE60309F3F03E83E38207ED
C8F63D35455AC30FE14DB8D3E54EEFF0832471B1BDE38F9C658A0DA006F475E3
DAFC35265E0BE6F3A6AB3B5C2B0C4CDC957DA0789AD36C919BD330D3F9AFF461
DA47EF5EE1BE1E5C97BF430678F9AF54323C624BFA02EFDA06CA84B522638557
A30FFD0257D41B3ADB17CC6F56D3E6F6B2CDDA0D064394D26F6681DC6297B830
0642F4452912563A14F87C85C27183EC6FF134F7AA94AC017FDD3B8CBEE8EB67
0A71109AAC00D81E097244A9DDA89FC6E81885E002F681812ED8354F7ACDCAFA
DB9922C89E9D1DBE564488FCBE426A4380D5D8A0E3CF4B632C7D460F76839FA5
BD7602B7B5C20B9238FDB235277BF2D9A6183113DDFD51D44268E33DE1A79878
8478AC5C5D52A1E0706BDA938D4A20633BCE16BDA9D05DB2A290AD90049D0E94
8A68668DD28C807D84487D6D4BDF915E6165B513DB37FFEA983F0840E9044919
92571C96DD4A37D013DF253470CC817067E8A00750A515079CB6BD33A5A814F2
F31ACA662507270EDA03BF285214D140E8E5AB06F38DC1971DD72C592215311A
46C98FA8B32FB0EB8282F3B0040D124889492A53F91EED9CD8992C9955FFA18A
9C7F30A0677ACB957E904FC9EC9B5FD23B4D89BAD4D4DAF6FCC7C573C497730B
FD349A62000473F22D8F6B2163C7DF26C27003D8CE6348B5A13EDB8C982E382F
C46736788B96F407D8503BB1FA6FDB620B732962E16240CB82FEBF7E2371225C
5BAFED42686513475A284187AECA2EBD42C0E07721E2F1749FB58EE1EFEB967E
17115010E8985C6A700C63F92B82F48707C747668D0A839E4196318383104CBD
B4D2FBA68A031D5A2A4619617A21483C2E81A6758FA2C8CBDD63C13CD627DF42
CEC13770237D11563B19F5E23CB41173B87B291E394BEDBE7E29CED953EB1A2D
492C61D6990ABF4F05B5EE78994FBB7E95C92C65736EDDC78A6AC58FDC2C80F0
1BE4CCA0F26D2F28B56C40789BD9C74B021F322D3D3C5E15C0B586A58B070BE7
729DF9AA2802362BA9F5E2DAE85DE06C4DC57787DC19BF2ECDB57FDCC121505C
19509A6807E332CE4A1A7700E9DCF19496499D147177FB0E201DDA1592DBFB48
FC42EE16E7138C7B229EE53EADF522AB4910FAEC4A866A38FB44586E9C2FE0EB
F1864E9A4A2D094CD770AD1903A8F8120251A31D210FC88688545FDAB417CED1
911AF9799A5C49F7FB9FADED002D96A27D8DD06D1B9DFD71783DB41797E7516A
34E631C0EF4B2DA0903D6CE4440728C07179CDA95CF24C0DCF4860E5DDD8A3C3
C66A07AA81AF5E90C1A80E2016A42DA8B98573708BCEEE1D172AA408769111A0
CF5E976DCE4C30EA4F7D47E5EB66AFCBC297FD4BDE0B501F167211CFD595E23E
A4EC8EC87605F08FCCD5A93559675AE330392F54196FFCA00BD421F85BF3EDF5
ABF7D01A6D095D121352FEDE38A97A7B88A1CA5CFF432D10ABE11F21642B660B
978D3DEB35B4DCAA849AD1F5AE6CAFDC31D83B031D55CEEEF5DFBBC1BD7D7755
4191965DD058B8895EB46340D6DE427B73C04C31108D56D677C9E68A426E732B
60A4993067393F1FF46517302496A0F1CACA2B085B01A1B74A565759408AB632
95AC01A3DCB4BDC51E972B4E1D35082CE435085A3FF6A7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.1: CMBX10 1.00B
%%CreationDate: 1992 Feb 19 19:54:06
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-301 -250 1164 946}readonly def
/UniqueID 5000768 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F00F963068B8B731A88D7740B0DDAED1B3F82
7DB9DFB4372D3935C286E39EE7AC9FB6A9B5CE4D2FAE1BC0E55AE02BFC464378
77B9F65C23E3BAB41EFAE344DDC9AB1B3CCBC0618290D83DC756F9D5BEFECB18
2DB0E39997F264D408BD076F65A50E7E94C9C88D849AB2E92005CFA316ACCD91
FF524AAD7262B10351C50EBAD08FB4CD55D2E369F6E836C82C591606E1E5C73F
DE3FA3CAD272C67C6CBF43B66FE4B8677DAFEEA19288428D07FEB1F4001BAA68
7AAD6DDBE432714E799CFA49D8A1A128F32E8B280524BC8041F1E64ECE4053C4
9F0AEC699A75B827002E9F95826DB3F643338F858011008E338A899020962176
CF66A62E3AEF046D91C88C87DEB03CE6CCDF4FB651990F0E86D17409F121773D
6877DF0085DFB269A3C07AA6660419BD0F0EF3C53DA2318BA1860AB34E28BAC6
E82DDB1C43E5203AC9DF9277098F2E42C0F7BD03C6D90B629DE97730245B8E8E
8903B9225098079C55A37E4E59AE2A9E36B6349FA2C09BB1F5F4433E4EEFC75E
3F9830EB085E7E6FBE2666AC5A398C2DF228062ACF9FCA5656390A15837C4A99
EC3740D873CFEF2E248B44CA134693A782594DD0692B4DBF1F16C4CDECA692C4
0E44FDBEF704101118BC53575BF22731E7F7717934AD715AC33B5D3679B784C9
4046E6CD3C0AD80ED1F65626B14E33CFDA6EB2825DC444FA6209608D3976637A
DB9C73EB3A28623DF758C25574D740385B2C3D10086AEB904A33DD76DA2CC4BF
7E37F9117E9D81D3EFDA12D5BDF0067450C5A8A53959C055C5D6087F1FE6FB5D
8306F16FAD71AB986320F1229440C63ACB5FA24E41CFEB12C2BEA2C25E59A3F9
6CA5B7A04B57F2471D36F5B41E6363DCEFF2DFFE9131F044125884739392333E
15418156EEE8DE92EF4C176742032FE8889839755D8D821CD7F8FAAF8A22C283
19F79216C6D454A864898EE9F830DB5F3372B8F47C464DF19C69ACB3BC0566E2
F25E7FF148B2CDA2B90CB5884440F464CD57295728A4415963CC1BC0635BBEF4
E812CA5E0E788035873D05616F7B0F6A30D36BB285E7955CFD860345F16D952A
BF2F7D2702DB352D0874442B2074859EB49313BC27E1067D627362649D82A5C3
A57DC5041B1A13FD2FA89D80FA075677C6359244645E7803D375D96AC0592A00
FCBB5DBD975E6623AF9AB4BB367E94C114315D792D4F9AB90476703123E8CA91
C5320DAF18E3F2EE157BB76A11E3859787627234DF8B9A43DC60097A495586E7
62535387D8D272782C983883FDBCC31365F4DDF7FEA7E5BA9D6A0920A33DB44B
20F7F492352A120FF02FF54C1FC4D181378547D3A88CA31CB660B2823FCED5B0
530487DAD2208ADCC6F98C72AB9F84F3C0C1B9417F7374DE7DC83F2B3D66FAC9
E510D5EAA04E335355B0E26711658E3636933A60C554B80B5A7C85A141457847
C5EC09C01622C089AB3CB216A5C27D652C535FF7933A7F5E47D1E23A76BE2E21
1275F24D04336EE86881E03DEB79F749FC01B7F4A37E67C704A4E4C5124A9CC2
E373ED1F6F3EAEBD1C8C533E943977A647F3FF6950333AC92AAC280B543D226A
A9DC21615226B22FDD0144B447579B0D8EDF0AD7B2DCECFCF6E2734B283CF1CA
A52E4C198B9974C13D05E062FF908AAFB058F46A9E1B1A2B01CFE59DC489CF11
2C663A5B71175EA9CFE75AB64706C1D1256EE7A416E7FBE12AF4D14838D90E75
540D0D55A74B946A7BAF34835CAF58EC8DF734E2E96A021B872FBA22466FB95B
96FA1760A056986E47FD9DF338804680B3A107EA9167B568CDF0031E4D789FB0
EF6DADC90BCDA1FBE1CD3B15B74D20995FA1358574BC929377D84D7782A8387E
49B8F1E10B58B57D15D6C7EFCD477275FF3D5B5613634148FC3C356A62359720
DE24AE23C327C5117F235B34FCF48316E0E912CFFDE0C733A9821C44D9D54AF2
7E2F1D0D0C0E495DEA12A02E982F9ED1C700AFCCEFD6B629FA661440C361DDE7
817154052436A369DE427BA56C5D9812FB9D9682B78BD2C6109E3D52508CABCF
4E92B61AC007F0BB8375D8F018A8426CB8CA1BD3D2FDDAE756A716B4D7DC9524
341D8C57CC3F2AD17A24A2A2075F67759763D1F52C01D2275D1B0FFB60965287
2E91D0317A1770C2F25785DB6E6C2EDC552712BD7DC0235B72DDFB3F05EE08FE
9AEF1803E1B6A397B82B265B4B8A3661E3BD0FB4DE330F827FBE0C3CFF9C5CAD
1CB5BA1AF1B6A8D13F6A0D3E109163EB7A482EB47A3F58A361C07DF0EC3C161E
0083915E85D8F0D305D828D78AD19704B6CFBBCC8BF9EDF39DCE79AD75C74DC9
A3983998600A0EE7F0044A5CE67D09B504DA0EEB27A680E30AEE44BE9B821E13
8B4FF38918E4E89ECDC49047390365EA0199547E9198FA90F4556BF3B3929C07
2C925A5080E193CD5E2DFCE8F5F40C2B7A5EFBBE63A9E2AC6A7EF58082235DC3
5EA7D55273EB1B882EEC21EAF2AB0B6D9FA2627D03087FDB0CB76034999AFB1F
75F14A22EA470E2743CD039845988141A3372FDE1F839C7CF30BB789E9B61686
4B523C39661F2C2D8BFF385BA11F84D8AF5ACEBB75D092F1E1DFD77762D2DC1A
774DF469C91EAF2CEE4D7C8FDE3C3734C1001013B01966AC13DB0B32B68C95AF
E89EDD459668145C258CF5C4745680AA6617717F540DD2648457FA480A1579E7
0556E7F99AE467DDC79FFACCD0283950A6EF87430FBDC9A41F8804480925EB0E
89F388ECEA34D92E1EE3EE0F89585C28E3B432FA8AC16D1BFC0A2881D05DE733
1223FEDDCDBFB3475FE0689A0B73353B2E393CA55FC636CCCC2815F4F3E4853F
C2E7BBC49D9F6AF02F63DAC1B0148DA7E46D241E2F2298441022D53DA1B5DB20
C43F3479B3D1436E17817B279B8F513BD168FD18F48D79A1D48BAD350100FAEE
75E0EFAB2C91AC27584F5210C0487807CFB4E23093D2979F70175588C31A68B0
1BA07FCAB76B71E75FDF2A6D3D3B4AED4E0F749C353CFBBE1D41C607512229A3
CAB0746071F74D984F1B48D0E0C92C4013CFAD0B9B134995CBAE36AE4B3E452E
8A7456B29F5C44A30857CEC1092C184CE66D437435BBD66BECE05B77C50DF9CA
EC14B063A48807F643072774F893775A44563693468A9E8B71A880A696735E82
465CFB6DD8C9B45942E0DAD4D6B484247E3ACE4626DE78FC41F8A9C28B4E466D
FF5F0442EEE05A24CC73C8C15455AF67975F68D151B64806FAB1EA7D702238EB
38DE201206A74303334EA0927AB1539B4A884007CC20316B25954A498DD18EAA
BD2920B3C292A10F26BB696B97C25A970998B880962446370173CB6EFC2A893F
A4A5A07AF6B96AD2A1E0EDD7ACA9D807BE54E754916678B0CFFD3D060BF7324F
2D090B6EF3F7F78C5B690EA66AD4F12CFFB86729E170CA79003ED80DFE13C43B
9EF93F3B65063D44FEABA72839E1FE6D10862F469D6CB72665E71BFCE95B1C72
131AE8D8B922242D56C755ADE5014A5AC966C8B7E05FC6B54075EE652C9122CE
24248758BEBBD8CFBD73E5FCDFE99D5608E5530776F57731EF0A959FE4B8FC54
3986C30141D396B7A0BD9C06DAB42897B498B2DFA753D48378BCEA035206640D
0098DD3126C958CD4F57275E53FD8EBA350D5408AABB6AD1D939D7CADF28D3A4
01FE60DDACD713589B3AD62B07F68F0FC1D048AC0703C17D19E97A2DE2A6341C
973EF5D010749D85C64069D881E2D01D44C72643A4EF0A9BF0B2580B7A83D088
DBF7D8D91D6FB291D302D283C7152062FA9951BF659E6974232DDBDE0801D2B1
BFE46361E233652D0D8581698B98898AE5E46549C7D8182A51B056BDEE023367
87332F43570471881033DAB23D32B065A1B961128A83B0B9B17187F65F5FD17F
60299260413D0FD9EF4F2099236D7498CDFC5DEB8FBE041025C8A86BE1E305D0
790C49174BBD35BEF696CD001FA036BE199C7C7C793671E29E6A70AD7838A65C
2C8B190329F136E216DC092B68F968CB8E379C10D4FFA745409675EDA9558A3B
CF6EFAB59B7A7AB5C7C72B8DECB427D6F5E22D9FB77F41C5FF2CED7EA316772D
8CE7B50C35EDF8BB2AF8F39C1A1BCAB7DE6FDDEEE3970FDAD4A3C69403599D18
FFADFD1DCB295D4915891CE5DA1F75228AB61F973989922F3BEC11FEF0EA9851
CADB76D659B84949479757658B74CB5C6C001885DC741E62CA956F51D11F35D0
C9E22E3700D1AFD63C6B3CB37334E179D3AC1B712869DE0FAABA2BD297AEC522
47C09A98BA5802B57E10B39A0076A1D20150A7F82F0844440B949BFCC34C90A9
D6F7137FA080014160D4C8E8BC86B8F70114D5EEFB7115B8FDFF6F8B7BBC648C
C1FF4D9AD6B53587D357C30FD58C69E49014A960B3C59481D91814901FF4CBB9
663B36F5E12695F120EC6C94F533163E8C7688831C2F5638BCB5A7B0EF15AC2F
6D57740B8741FAEFA3F2735B3908E62DA0D6FA111BED78946EE4EE05A2B644C7
9D03E8A53E4A9288143CD7BB17AB4F5547EF65ECA5033E8565A984AAF0A3B20D
8041822BB17CF521ECDC0E1758B93EBEAD91D564CE82CBFF0CFDF404A90D51CB
382CA6B772E2C1534A937E9CD0D20D6E2F1A71348C5E01A1CDF3882CB411F4EB
2E86059AE3E265DC23E8B6F0634E161D0704E2D285471121E9C6E1710D1904F8
95AC7B4DF6C3C7BE3FD36A5DE1512B67401EB734397CFE34143DC5F9FDC510BB
457F4F2E0D5553CAA54B570D501C001D95FD16859A408DE5BABAF7AC7FAAC5B1
A8F47767B864D8F19D6B5E17D911095204D3D9E5E46138A9B79DE7EDFCA37FA9
24AC497D027D99CBE0870F783FB8161B90F266304F06C490992383AB6A1C165C
85E478E5AB6CB5A308B6EEDD3979B4A453BC5259C6A7AFE256E505B931AA407F
C37E7409E34A3F21574896BC8E6D29DC7A99646E8BDD24A04136F0C83D444AB7
11B486F9B003153885E14FACC007BF9266C4ADC9515715A0E98A6ADD1B9129CB
714BF53506B66FB3EBB4496F198BD86A1DFD254208FC5CB8F5D9C97D85B9FCE5
D9861C511B052663BE5DDF7C9FE87203CDBBCC66E32000697314B9BC66B88B4E
28271EB2E6EEE4AB8568B6616564D87D7FEB4C994F5A8F2B143ABD828786919A
EF4E45C6CE7B1F96E72135109BAAA82D1CCC0CE55E8C459A814872E0BCAAB98B
2DD4BF96F61173195839407E71C881C050AC5E5FB6CABADC1C3D00C5A43FADBB
99D641C50C0AB39B7319FB60D89D97F4E290E29056D5BA488246B34E6A31AC41
3289554D6E58953847F0E7F87697367AA67F1D32CCE5B4BA7D38CFCD3DB7F486
BAF65742C04ED6D47A755F0498D0FEAACAC2D233F7E785D1F5A6EC10A8491BAF
9F0AAD3C8F7140BEB66C50FB3D02A5651BB33E3991F24385CC1439D28CEBA155
EF2C062179AE5752C845BFFE75F7C61E153DF21CBCEB86275EBF7BC4AEE46271
8007F1B1387042B56C0856EBCA064E5EAAFCF59F41A4CAD95CC596443131D7E1
FBAD8F2AC5047AE858201A6766611596E056BEFA28D6534BAEBB4053B32C0FD9
755C3134A020E34F2E43A1144A6E16C7373712669253F92FCEE9E2585DD334CE
6A0246FF16BF76BB910B4B7283DB6A46BEE1825503BE5269B059AE94D984B60B
090BB455B85277DA599A963D5BB133991E1A57FABD0E119B277C84BD50F4734B
5C707A3AA6A16801311EE5320346C1C8E93E8752541528619BDBFD2868CC493D
12D7B19368E8C3695EAEF4F55E67B908538DDF8866E7AE8655D7740877561ADA
94F211C1C64A16846D9FC84D0C7301FF044DF8155E8093C8CC8F2A4652EFED7B
D5B040B1A6342E7FBCC4AAEDBA402A6B9931F5FDD9E0076609AE12FC4CB25403
404B688134BDDD7F8E16A8684D14C6D431323148A6CB2F114834662DD763B87B
D26A4E2A5CBA9A7CBE61A3EB7866BCD4225981D1F30D3F054D25E2D4335FF6EE
DA816716001A0DB4BDC4DB80939B80F8F9DABC531C3B23FCA93931C65235408A
D35DD111D95063967D209B27C3B35EC233485945C468C817CC605404AD5D59BC
59B66B18DC343C7596DF8717C46555E2E6DAB58FFCC1B47135C569066B8194F3
995E52D721E5AB5CF3436ADC487B31F5217612884F8392F7B59D1EAB5EB2E8AF
8C67FBA38B4B69BCBE0403A28864BD60A520C9555CF42D899217140D303DAB0A
9AEB683E256C5B566EEFFE49AC47F966246EEDA301ABAB5DB933146492F411EA
59F467D257D38F01583A7F93F24207176CCD99C6ACB4B74F35F488DD4CAE657F
0FC762EEEC367009E7B59F8D1AA044B2D8522C7B19690E911167716E6F35A5D9
DF88B1BEC7410216C077A62419AEB11083AD8217C6F504058FA3E4C5D0A767EE
3B9F861AF361878BE4ECDA2A45454491CE6393097B7DC790913750C809CBD0A6
88023BA7BF71D3BC57F5DC230A37FF7D340C588F4F9AFC21760B0E5A785741F0
1E7F3696A0155591C3685DCC82CCF1953A5010A8540EE51BE79FA1A7396399F9
343B1C7BB4455835FDFD73D92E4A9D96F2CF414A25F701B364E51856D5A2BD9A
D7D843CAE4DDE1F070C76ED16483780AF2CC75FE18629AD5E35095F693C16229
7CD17CEFCC9E946917F493AF40188C7640B100899B928A4D2C760CFEA01234E7
C0F34953F7C3EEC9012D948D188E71076778449A7A604968FAFBFBA2DF21F667
5D108866571603137B1E492E282C7AA5474B9D5BD16113F57A4D76B52B43D5DD
A761FB3523D9288E4D86F694B51B7B4712DEC4854F6404DA7FB0EB730F3CD5F5
6E9B877E267FEE73FB37B375D25C6A65CB2C567957F9A41079BA77CB5D7EE116
7F2B14EAE84A5564121FA4A8F04FD751841C0BE347FBBA4D28A6215B8851423F
06EACEFEA8962AB4FB2340E1A6A2F793BA676E57E1E6B5B6800D3EC68E6E1706
96FF8F45D0F10C726AE609E31CE15B40FB3A4A34A6A0AD96DC88B06D509AD268
0838CC40FAC9E55E6182BD210694DB4CA128745BEDC872AA1E53798C8314C612
77A6251D09082673F0AD1CC325E577C114BE5015CF512C1125F5C6AC90C1B93F
890ACFF4BCE538B688CB423DE5663BFFA39DB1E817530E7065A7025645A9CD51
04126E3550140FEB9D7622994A234A2668350C2B612478C267CC333EA9AF3575
403AFF6B21406A20E04FA48B7ACE7EFF86462CD4611E3E455923D43216DC4F99
59361D0C6DC939B8DAC68176C3193B915FB4C84B3159F6311B83572E707FB8F1
2A05E4E81300951CD54081B47AD22593EA2FEBC16CECC0F5D7AE4D2530263182
C3642DB83F1435385EAD2F9B0A2F22D386F3EACF3A246A338F655D00664A448A
2876AF42325A052DA9CF6236D991192F09827B5672E1DF9F324DEF5513E9DE12
B254027FD3D6D28DBB92C76917A149C92F8014A43903AF0D5E1BFA27B712777E
874653B0C7E7E143E40B15B1443F9F68627A07C509C6222112DBE479C361A17B
D4F47BC0ABE40980F6B7DB60FACDC3241FFCF72EA9D0AACB50156CA8F526261B
0E13F71EEA400BDD51C73D68986CC0D1CBD7D27A346864A5EBB999AD230FDFF1
13CE843A1EA782445928E5F4D4F32161C2B0E3CAEAC0715DD3B8A26BD1C31FD0
8718D8959F6CDF2C8558206711B69F2DD2F0FFB621A4211135DF4FD9844554B1
3776C64F6CEB97D79D9E110CB3AE104ADBFC465BEFA7EA8032861D6DD39846AD
FA272579BDD0A68F884B4B359079728D7CAADE0344979D55E6CBA09D348A8C97
3962733E34FF92A9141CFA830769CFE94A5B9593BA34A18D1CC38D92391DA443
A4F0E16E5C00E2E069D64A4E31EFC0E33B58CE0231364ECCDB218459103FFAA3
CBA73959BC15427C6B0CBBA2316B16F62D293FC6BDD9BE8718EEA86023E3E2D8
B07ACE758E2D11FAB146BDC6DC321B6F624903D35DCD767778E63EB4F07EA494
61512E31E9D8B643AD047348F15B45CBED9A86FF1C556E5377849741C697486D
7D0BECC434621751F0E875518FA8BE53DA8DD77BCFD4390A8FF2B6A7263DB3B1
91ED53CDC1DD25EC141F0BB045ED4E01B53D4DDC8231D3A8B0A9CEB423680FC7
474083951EA3157F9AB49889787FF1BD16BC3DA06A5B1982A508E01A39CD8619
76924CD8C818456A424F44DEE9AC18FDF5F3B82052B6518D183160AFBE54D373
B2BB4E2EBB8554592283A043113E509E359940EB55EEFB0C3B8E73CF0162707D
C33140A7F134B9E3C6DA4E087464F50D7D016955937BE599E6B189AA7DC7D395
10C07AAE924FEE477E6042B62719F8A4CBB4AA8F72FD25C6AEEBAA1EBA189107
EB1C23FC94AF0C87E2761EF8B353F1B44C6E2D011EEF3164A62BAC24A31F8614
E09D25BDCBF735842812287A4D014581046218A6AE96871ABB263316649B11C2
9F881FDF782738CAF4FF4BC4246DA3303643F0005DA01AC33694362B44F649EB
707463125F23962FBF25165BE2F2C9905242C89FD20EFA4B4FE7ADC41EFF0925
FAA153FA22AE973CE449B057B4229F384B5B80FDB7FCE6A90A1C49ACC1CD25DC
E6E859CEA52D70CF47FB6F407684BAB896B238FB193BEE1134404EB96DAEFEB2
3DE7340438D902C824B40A454C9688712E51565DF8C1171BFA4CE30FF20FAB26
E710CE832CA07D87E84FD2A9D5C4959156A43F222A5B0EE08849E53A5F410C9F
F33E8D67ED0C8975E859A0146569D75E34B3723B97D4E16F939351B6CE3049C6
9C2BF0CD33221FE8752F27D85CD66406F1810DC144CD9920E0EE4B517210D58A
0E717082BE39B8ADE700A9C886D6F1678A91B1C7975FEC05D543381517FDB510
BDEA32B5E5529A5AEB04D0A493ED6ADA5736553742504C2D17911BA830F9F4A9
04AA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (dzhang-splaytrees.dvi)
@start /Fa 144[33 2[19 4[33 41[51 9[33 33 33 5[51 1[26
26 40[{ TeXf7b6d320Encoding ReEncodeFont }10 58.1154
/CMR7 rf /Fb 205[45 1[19 47[52{ TeXbbad153fEncoding ReEncodeFont }3
58.1154 /CMSY7 rf /Fc 134[34 38 12[35 27 23 6[29 36 97[{
 TeXaae443f0Encoding ReEncodeFont }7 58.1154 /CMMI7 rf
/Fd 166[106 120 7[88 14[73 73 14[73 73 28[61 61 16[38
38{}11 83.022 /CMEX10 rf /Fe 133[34 40 1[55 38 45 28
34 35 1[42 42 47 68 21 38 1[25 42 38 25 38 42 38 38 42
12[59 13[54 4[62 18[25 1[25 44[{ TeX74afc74cEncoding ReEncodeFont }28
83.022 /CMTI10 rf /Ff 234[65 65 4[42 13[23 65{
 TeXbbad153fEncoding ReEncodeFont }5 83.022 /CMSY10 rf
/Fg 138[46 32 1[33 12[37 1[37 22[52 17[23 42 3[42 1[42
42 42 42 42 47[{ TeXf7b6d320Encoding ReEncodeFont }14
83.022 /CMSL10 rf /Fh 133[39 41 47 59 3[39 37 3[50 1[25
43 1[29 25[63 16[65 31[49 30[{ TeXaae443f0Encoding ReEncodeFont }13
83.022 /CMMI10 rf /Fi 134[71 3[75 52 53 55 1[75 67 75
1[37 2[37 2[41 61 75 60 1[65 12[94 75 3[101 5[50 7[102
13[67 67 67 2[37 46[{ TeXf7b6d320Encoding ReEncodeFont }24
119.552 /CMBX12 rf /Fj 134[59 4[44 44 46 1[62 1[62 1[31
2[31 3[51 62 2[54 12[78 62 9[42 2[70 18[56 56 56 2[31
46[{ TeXf7b6d320Encoding ReEncodeFont }19 99.6264 /CMBX12
rf /Fk 133[37 44 1[60 44 46 32 33 33 44 46 42 46 69 23
44 1[23 46 42 25 37 46 37 46 42 6[51 1[62 85 2[60 46
6[52 65 1[30 2[54 1[63 1[59 62 3[65 1[23 23 42 2[42 42
42 42 42 42 42 42 23 28 23 65 1[32 32 23 26[46 48 9[69
1[{ TeXf7b6d320Encoding ReEncodeFont }58 83.022 /CMR10
rf /Fl 134[50 2[50 1[37 38 39 1[53 48 53 80 27 2[27 53
48 29 44 53 42 1[46 12[66 3[65 3[57 8[69 1[72 6[27 1[48
1[48 48 48 2[48 2[27 46[{ TeXf7b6d320Encoding ReEncodeFont }30
83.022 /CMBX10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 150 342 3657 4 v 150 736 4 394
v 1399 424 a Fl(6.854)31 b(Adv)-5 b(anced)33 b(Algorithms)178
571 y Fk(Lecture)27 b(3:)37 b(09/12/2005)1918 b(Lecturer:)36
b(Da)n(vid)28 b(Karger)1627 671 y(Scrib)r(es:)37 b(Xin)28
b(Zhang)p 3803 736 V 150 739 3657 4 v 1668 1068 a Fj(Spla)m(y)38
b(T)-9 b(rees)150 1408 y Fi(3.1)135 b(In)l(tro)t(duction)150
1661 y Fk(Spla)n(y)26 b(trees)f(are)h(binary)f(searc)n(h)g(trees)g
(with)i(go)r(o)r(d)f(balance)f(prop)r(erties)g(when)i(amortized)e(o)n
(v)n(er)g(a)g(sequence)h(of)150 1760 y(op)r(erations.)150
1931 y(When)f(a)f(no)r(de)h Fh(x)g Fk(is)f(accessed,)g(w)n(e)g(p)r
(erform)g(a)g(sequence)g(of)31 b Fl(spla)m(y)e(steps)23
b Fk(to)i(mo)n(v)n(e)e Fh(x)i Fk(to)f(the)h(ro)r(ot)f(of)g(the)h(tree.)
150 2031 y(There)i(are)g(6)g(t)n(yp)r(es)g(of)h(spla)n(y)f(steps,)g
(eac)n(h)g(consisting)g(of)g(1)g(or)g(2)g(rotations)g(\(see)g(Figures)g
(3.1,)g(3.2,)f(and)i(3.3\).)525 3338 y @beginspecial
9 @llx 639 @lly 351 @urx 783 @ury 3420 @rwi @setspecial
%%BeginDocument: dzhang-splaystep-rr.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (rr splay step figure)
%%Version: 1 5
%%Creator: Adobe Acrobat 6.0
%%CreationDate: 14:29:52 12/28/04
%%DocumentData: Clean7Bit
%%BoundingBox: 9 639 351 783
%%HiResBoundingBox: 9.0 639.0 351.0 783.0
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L1 W0 vm op crd OS scsa t h ef bg ucr sf ef r b fa pr SEPS ttf HB  0


%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.18 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.18 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset l2compat 6.0 1
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
cvi
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset sep_ops 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/undefineRes {
null exch
defineRes
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 1087 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-13, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:add4313f-17c8-4173-82cc-e37ff25e8051' xmlns:pdf='http://ns.adobe.com/pdf/1.3/'></rdf:Description>
<rdf:Description rdf:about='uuid:add4313f-17c8-4173-82cc-e37ff25e8051' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:ModifyDate='2004-12-28T14:19:18-05:00' xap:CreateDate='2004-12-28T14:18:39-05:00' xap:MetadataDate='2004-12-28T14:19:18-05:00'></rdf:Description>
<rdf:Description rdf:about='uuid:add4313f-17c8-4173-82cc-e37ff25e8051' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:ab2ca1e5-31cc-4ded-a165-b8b43c8b6c0d'/>
<rdf:Description rdf:about='uuid:add4313f-17c8-4173-82cc-e37ff25e8051' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>rr splay step figure</rdf:li></rdf:Alt></dc:title></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
9 639 342 144 rectclip
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%ADOBeginSubsetFont: KDPENO+TimesNewRomanPS-ItalicMT Initial
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2004 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /KDPENO+TimesNewRomanPS-ItalicMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 120 /x put
dup 121 /y put
dup 122 /z put
def
/FontBBox {0 0 0 0} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD1638113E4B58C0B5F39100186722805B704
AA3988900AFCFF05DD> |-
/A <1C60D8A8C9B7D8BE190A9802974A4C1AA5E1AB8A0FFB01E4A47ABF2336F0
B7F1CBE59C6A88B7A18B3BB28E33891DB38D52F9AB7A997D51E39EC1D9F9BE0B
E55A7AA1F50F31DBC6010D51CC0B8B82324F65AC03A3772EDD9823B643587986
4B059D2E3324A28BCF13A698E07B0DC38EBFED8CD7D8B341345165854758E2CF
25BED4095D5BDD86297E1ED15868C4D3EB1DF94C3C9805DFD40CED066A5374BD> |-
/B <1C60D8A8C9B7D8BE161090B4306626FB679B706E6F4139B4B79C97463D9A
69CAF58AA09F4964EEC013B2FC4FA7699800B865D2071C68837730B9BC09153A
467C6987AA9EFAACC04FBFAD7BB080076F75C6C6273F57F6D0CEFC0279585E84
6C9D9E795ABD1D4349C960B4DBA9914AFCF36BC91E1F8F92C8C7274139F9D770
0EC2A27019841395968BFAB5CAE25E51DB74FC1DF6E905ED0B31DF219F96CB60
8A5B08C8661FD2FF160B5117F4A89DF5B01575674FBC169DBF2A343754930A87
B0715F70F21BA2751B8CDBFA7766DED836903D16234290F9C5A391A2569423D1
63F1ECE6C4E56278A98DF84129173A7291061237C29A314067AF9E9AE6> |-
/C <1C60D8A8C9B64EDFFAED57175A5527133421EBC21E76DBAB72ACCBE9103B
32DE3E656A165A65E9E2355845AEB7E09DA6E215018706AF7B889BE7E49F000F
A5830EB21A5EAF4CB6ED590C06E0E498B57B3D796FAE982CC67DEFCAB50BBE83
88E1AD2B73E137A2E5B3F021118B9D0E0F8E0263367F4EA42B3B0DAB36C4D910
060EDA039D6F9BADD9D5C901F008667A8BB691EF8D79CDA368B8ED3A1E406AF9
AE6ED0D182B9009F11361F5A89FC7840A3C9963B411D1FCF4E73561175> |-
/D <1C60D8A8C9B6079F62854094BF26E9B7298FE4611183B4D839C6F370BDDF
47C1369012E0825886C85BD73A5BE2E0E1F370D06D5D6366465C6BB4D62F438C
2BD2976BAECB5A60D3A497F9231D099C85D357A4E2EDAD28DE87B7E7B77455A6
38ED58C3A0D830CF4CFBC835003F58BDC156D99D03F6675D9F11933727E6CC88
C9D3A8483839F939323FC680EC9F764B0FE40594DE5AE22849C28596D6CF0144
1A9E094A08BFD99DAD9329B8C0988DF6557F0E1C03170E1DD16FD8EDC38042CE
9757E99BACF0A154651A0A7C0DDA75C26EEBBF252CA90050CA8D1C> |-
/x <1C60D8A8C9B77FE28E7B59861DA633FA42A38BF207DC4A11329E63F66801
0B05585B22E39E733F2B39E647F14D7DCD27965006EEC01D3FBB556E503629E4
5F186BD20587B6FF8BB4E525ABE63E26F210C9F85E012A8DB6F803B316624083
082E536A1274247334ADD37479C48FDB7D8ADD850A8832DF9217A2BFFEECF6DD
96F21564B9189ECF65AD0E783A58F9E296A99147AE132DD5B0142AB4EA574166
8F4195BDF7097E5D12CB419F2F282E538E1EB21217502E3C6B11740802EC650F
4D2ADCD4B1772219DAF6BE6429CF2030BDF9C05BA7A5D790670BD325C71A55CF
EDEE3AFA9492A129CF25024BDA2414AE27F397E2DB63BB72C98E3704AEDCD4D4
A43DA02887C90FEE11520BD99634849C2457543FCB5BD3F0> |-
/y <1C60D8A8C9B77FE2A5F6578EB74A5BFD70E96F53281130D42B07852DDCDE
D49DD330FC357D6058C03E8610E8E1D643E8CA0EBC7995F8BABA9747A0C2E2AC
A69173E30D3ACD29C808B16AC9A852CB62CBDD288A4A7E966451A68CB6890FD6
1B1EF6E37046C4AE362DFF52C05E5E0E60BC6A163B19979A909E3D594EE95DCB
C6E7C631883A0E99BDB5D8D9A3E3E1A27177F57AE523C60D5B87B9A8F95973B7
E240DB57053F25B7E2735427EEA7A7AB55075C8F2065CBC552B611C79F3A08A7
38B67D80BCFC3A017B83DD56AA10FE2705CDE9136F3729D089A4CE85B23F79FC
3F372F0C03CE3A67067C37B87214D407E8CDB95C04AC4E38F20F21F7B960D30F
D020> |-
/z <1C60D8A8C9B7361F404732742F0EED32CA3EA29407959CECAFE0E37518E2
27CFD4490596548B4B85CEEDDE1158F7428B01992531F92248F4654D99DA5EA9
1746C333B262696C063AC1B1A955C0B8290BD933B9CCC86F8D642636> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
[/N9/KDPENO+TimesNewRomanPS-ItalicMT 1 TZG
%ADOBeginSubsetFont: KDPFAI+TimesNewRomanPSMT Initial
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2004 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /KDPFAI+TimesNewRomanPSMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
def
/FontBBox {0 0 0 0} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72E
FEDBB222483BD74F8B> |-
/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F5
89D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C0272
0FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF
41DB28C0847307B8DCBC66> |-
/two <1C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B
4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25
003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0
F90EDDE709834FFBF963952A5213F1DDF75DF2C0C4ABBF998F7E8BA2741402DB
7F4B6E4BDAD8DEBF530764A38FF9AF0505> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
[/N12/KDPFAI+TimesNewRomanPSMT 1 TZG
9.0 639.0 342.0 144.0 re
W
n
n
37.439999 648.0 m
27.119999 666.0 l
16.800001 648.0 l
37.439999 648.0 l
1.0 1.0 1.0 setrgbcolor
eofill
1 J
1 j
0.72 w
n
37.439999 648.0 m
27.119999 666.0 l
16.800001 648.0 l
37.439999 648.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
24.0 650.880005 m
/N9 [10.060303 0.0 0.0 10.080002 0.0 0.0] Tf
(A) show
n
91.439995 648.0 m
81.119995 666.0 l
70.800003 648.0 l
91.439995 648.0 l
1.0 1.0 1.0 setrgbcolor
eofill
n
91.439995 648.0 m
81.119995 666.0 l
70.800003 648.0 l
91.439995 648.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
78.0 650.880005 m
(B) show
n
118.559998 684.0 m
108.0 702.0 l
97.68 684.0 l
118.559998 684.0 l
1.0 1.0 1.0 setrgbcolor
eofill
n
118.559998 684.0 m
108.0 702.0 l
97.68 684.0 l
118.559998 684.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
104.639999 686.880005 m
(C) show
n
145.440002 720.0 m
135.119995 738.0 l
124.800003 720.0 l
145.440002 720.0 l
1.0 1.0 1.0 setrgbcolor
eofill
n
145.440002 720.0 m
135.119995 738.0 l
124.800003 720.0 l
145.440002 720.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
131.279999 722.880005 m
(D) show
n
108.0 764.880005 m
81.119995 738.0 l
108.0 764.880005 m
135.119995 738.0 l
81.119995 728.880005 m
54.0 702.0 l
81.119995 728.880005 m
108.0 702.0 l
54.0 692.880005 m
27.119999 666.0 l
54.0 692.880005 m
81.119995 666.0 l
0.003922 0.003922 0.003922 setrgbcolor
S
n
45.119999 692.880005 m
45.119999 697.919983 49.200001 702.0 54.0 702.0 c
59.039997 702.0 63.119999 697.919983 63.119999 692.880005 c
63.119999 687.839966 59.039997 684.0 54.0 684.0 c
49.200001 684.0 45.119999 687.839966 45.119999 692.880005 c
1.0 1.0 1.0  setrgbcolor
eofill
2.16 w
n
45.119999 692.880005 m
45.119999 697.919983 49.200001 702.0 54.0 702.0 c
59.039997 702.0 63.119999 697.919983 63.119999 692.880005 c
63.119999 687.839966 59.039997 684.0 54.0 684.0 c
49.200001 684.0 45.119999 687.839966 45.119999 692.880005 c
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
51.839996 690.0 m
(x) show
n
99.119995 764.880005 m
99.119995 769.919983 103.200005 774.0 108.0 774.0 c
113.040001 774.0 117.119995 769.919983 117.119995 764.880005 c
117.119995 759.839966 113.040001 756.0 108.0 756.0 c
103.200005 756.0 99.119995 759.839966 99.119995 764.880005 c
1.0 1.0 1.0 setrgbcolor
eofill
0.72 w
n
99.119995 764.880005 m
99.119995 769.919983 103.200005 774.0 108.0 774.0 c
113.040001 774.0 117.119995 769.919983 117.119995 764.880005 c
117.119995 759.839966 113.040001 756.0 108.0 756.0 c
103.200005 756.0 99.119995 759.839966 99.119995 764.880005 c
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
106.080002 762.0 m
(z) show
n
72.0 728.880005 m
72.0 733.919983 76.080002 738.0 81.119995 738.0 c
86.159996 738.0 90.0 733.919983 90.0 728.880005 c
90.0 723.839966 86.159996 720.0 81.119995 720.0 c
76.080002 720.0 72.0 723.839966 72.0 728.880005 c
1.0 1.0 1.0 setrgbcolor
eofill
n
72.0 728.880005 m
72.0 733.919983 76.080002 738.0 81.119995 738.0 c
86.159996 738.0 90.0 733.919983 90.0 728.880005 c
90.0 723.839966 86.159996 720.0 81.119995 720.0 c
76.080002 720.0 72.0 723.839966 72.0 728.880005 c
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
78.720001 726.0 m
(y) show
n
235.439987 720.0 m
225.119995 738.0 l
214.800003 720.0 l
235.439987 720.0 l
1.0 1.0 1.0 setrgbcolor
eofill
n
235.439987 720.0 m
225.119995 738.0 l
214.800003 720.0 l
235.439987 720.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
222.0 722.880005 m
(A) show
n
262.559998 684.0 m
252.0 702.0 l
241.679993 684.0 l
262.559998 684.0 l
1.0 1.0 1.0 setrgbcolor
eofill
n
262.559998 684.0 m
252.0 702.0 l
241.679993 684.0 l
262.559998 684.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
248.87999 686.880005 m
(B) show
n
289.440002 648.0 m
279.119995 666.0 l
268.800018 648.0 l
289.440002 648.0 l
1.0 1.0 1.0 setrgbcolor
eofill
n
289.440002 648.0 m
279.119995 666.0 l
268.800018 648.0 l
289.440002 648.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
275.759979 650.880005 m
(C) show
n
343.440002 648.0 m
333.119995 666.0 l
322.800018 648.0 l
343.440002 648.0 l
1.0 1.0 1.0 setrgbcolor
eofill
n
343.440002 648.0 m
333.119995 666.0 l
322.800018 648.0 l
343.440002 648.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
329.279999 650.880005 m
(D) show
n
252.0 764.880005 m
225.119995 738.0 l
252.0 764.880005 m
279.119995 738.0 l
279.119995 728.880005 m
252.0 702.0 l
279.119995 728.880005 m
306.0 702.0 l
306.0 692.880005 m
279.119995 666.0 l
306.0 692.880005 m
333.119995 666.0 l
0.003922 0.003922 0.003922 setrgbcolor
S
n
243.119995 764.880005 m
243.119995 769.919983 247.199997 774.0 252.0 774.0 c
257.040009 774.0 261.119995 769.919983 261.119995 764.880005 c
261.119995 759.839966 257.040009 756.0 252.0 756.0 c
247.199997 756.0 243.119995 759.839966 243.119995 764.880005 c
1.0 1.0 1.0  setrgbcolor
eofill
2.16 w
n
243.119995 764.880005 m
243.119995 769.919983 247.199997 774.0 252.0 774.0 c
257.040009 774.0 261.119995 769.919983 261.119995 764.880005 c
261.119995 759.839966 257.040009 756.0 252.0 756.0 c
247.199997 756.0 243.119995 759.839966 243.119995 764.880005 c
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
249.839996 762.0 m
(x) show
n
297.119995 692.880005 m
297.119995 697.919983 301.200012 702.0 306.0 702.0 c
311.039978 702.0 315.119995 697.919983 315.119995 692.880005 c
315.119995 687.839966 311.039978 684.0 306.0 684.0 c
301.200012 684.0 297.119995 687.839966 297.119995 692.880005 c
1.0 1.0 1.0 setrgbcolor
eofill
0.72 w
n
297.119995 692.880005 m
297.119995 697.919983 301.200012 702.0 306.0 702.0 c
311.039978 702.0 315.119995 697.919983 315.119995 692.880005 c
315.119995 687.839966 311.039978 684.0 306.0 684.0 c
301.200012 684.0 297.119995 687.839966 297.119995 692.880005 c
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
304.079987 690.0 m
(z) show
n
270.0 728.880005 m
270.0 733.919983 274.079987 738.0 279.119995 738.0 c
284.160004 738.0 288.0 733.919983 288.0 728.880005 c
288.0 723.839966 284.160004 720.0 279.119995 720.0 c
274.079987 720.0 270.0 723.839966 270.0 728.880005 c
1.0 1.0 1.0 setrgbcolor
eofill
n
270.0 728.880005 m
270.0 733.919983 274.079987 738.0 279.119995 738.0 c
284.160004 738.0 288.0 733.919983 288.0 728.880005 c
288.0 723.839966 284.160004 720.0 279.119995 720.0 c
274.079987 720.0 270.0 723.839966 270.0 728.880005 c
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
276.720001 726.0 m
(y) show
n
45.119999 710.880005 m
45.119999 719.039978 50.400002 726.0 58.32 728.159973 c
0.003922 0.003922 0.003922 setrgbcolor
S
n
63.119999 728.880005 m
57.119999 724.799988 l
57.84 726.959961 57.600002 729.359985 56.16 731.279968 c
63.119999 728.880005 l
eofill
0.0 sg
45.600006 725.519958 m
/N12 [5.589401 5.589401 -5.599701 5.599701 0.0 0.0] Tf
(2) show
n
72.0 746.880005 m
72.0 755.039978 77.519997 762.0 85.200005 764.159973 c
0.003922 0.003922 0.003922 setrgbcolor
S
n
90.0 764.880005 m
84.239998 760.799988 l
84.959999 762.959961 84.479996 765.359985 83.279999 767.279968 c
90.0 764.880005 l
eofill
0.0 sg
72.720001 761.519958 m
(1) show
2.16 w
n
162.0 710.880005 m
191.039993 710.880005 l
0.003922 0.003922 0.003922 setrgbcolor
S
n
198.0 710.880005 m
188.639999 706.320007 l
190.319992 709.200012 190.319992 712.559998 188.639999 715.679993 c
198.0 710.880005 l
eofill
n
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF

%%EndDocument
 @endspecial 150 3521 a(Figure)j(3.1:)44 b Fl(The)37
b Fh(r)r(r)j Fl(spla)m(y)d(step:)45 b Fk(This)31 b(is)h(p)r(erformed)f
(when)h Fh(x)g Fk(and)g Fh(x)p Fk('s)g(paren)n(t)f(are)g(b)r(oth)h
(left)g(c)n(hildren.)150 3621 y(The)27 b(spla)n(y)f(step)i(consists)e
(of)h(\014rst)g(a)g(righ)n(t)g(rotation)f(on)g Fh(z)31
b Fk(and)c(then)h(a)f(righ)n(t)f(rotation)g(on)h Fh(y)j
Fk(\(hence)d Fh(r)r(r)r Fk(\).)39 b(The)150 3720 y Fh(l)r(l)28
b Fk(spla)n(y)f(step,)h(for)f Fh(x)h Fk(and)g Fh(x)p
Fk('s)f(paren)n(t)g(b)r(eing)h(righ)n(t)f(c)n(hildren,)g(is)h
(analogous.)150 3985 y(W)-7 b(e)34 b(p)r(erform)f(spla)n(y)g(steps)g
(to)g Fh(x)h Fk(\()p Fh(r)r(r)r Fk(,)j Fh(l)r(l)r Fk(,)d
Fh(l)r(r)r Fk(,)i(or)c Fh(r)r(l)r Fk(,)k(dep)r(ending)e(on)f(whether)g
Fh(x)h Fk(and)g Fh(x)p Fk('s)f(paren)n(t)g(are)g(left)h(or)150
4085 y(righ)n(t)24 b(c)n(hildren\))h(un)n(til)g Fh(x)h
Fk(is)e(either)h(the)g(ro)r(ot)f(or)g(a)h(c)n(hild)g(of)g(the)g(ro)r
(ot.)35 b(In)25 b(the)g(latter)g(case,)f(w)n(e)h(need)g(to)g(p)r
(erform)150 4184 y(either)i(a)h Fh(r)i Fk(or)d Fh(l)i
Fk(spla)n(y)d(step)i(to)g(mak)n(e)e Fh(x)j Fk(the)f(ro)r(ot.)36
b(This)27 b(completes)h(a)f Fl(spla)m(y)i Fk(of)f Fh(x)p
Fk(.)150 4355 y(W)-7 b(e)32 b(will)h(sho)n(w)e(that)h(spla)n(y)f(op)r
(erations)g(ha)n(v)n(e)f(amortized)h(cost)h Fh(O)r Fk(\(log)15
b Fh(n)p Fk(\),)33 b(and)f(that)g(consequen)n(tly)f(all)h(spla)n(y)150
4455 y(tree)27 b(op)r(erations)g(ha)n(v)n(e)f(amortized)h(cost)g
Fh(O)r Fk(\(log)15 b Fh(n)p Fk(\).)150 4794 y Fi(3.2)135
b(Analysis)46 b(of)f(Spla)l(y)g(Steps)150 5047 y Fk(F)-7
b(or)27 b(amortized)g(analysis,)f(w)n(e)h(de\014ne)h(the)g(follo)n
(wing)f(for)g(eac)n(h)f(no)r(de)i Fh(x)p Fk(:)1895 5527
y(3-1)p eop end
%%Page: 2 2
TeXDict begin 2 1 bop 150 40 a Fg(Lecture)27 b(3:)37
b(09/12/2005)2666 b Fk(3-2)300 1447 y @beginspecial 9
@llx 639 @lly 405 @urx 783 @ury 3960 @rwi @setspecial
%%BeginDocument: dzhang-splaystep-lr.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (lr splay step figure)
%%Version: 1 5
%%Creator: Adobe Acrobat 6.0
%%CreationDate: 14:31:03 12/28/04
%%DocumentData: Clean7Bit
%%BoundingBox: 9 639 405 783
%%HiResBoundingBox: 9.0 639.0 405.0 783.0
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L1 W0 vm op crd OS scsa t h ef bg ucr sf ef r b fa pr SEPS ttf HB  0


%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.18 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.18 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset l2compat 6.0 1
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
cvi
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset sep_ops 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/undefineRes {
null exch
defineRes
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 1087 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-13, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:812079cd-ef9f-4bd1-bd63-16c35ef48e1b' xmlns:pdf='http://ns.adobe.com/pdf/1.3/'></rdf:Description>
<rdf:Description rdf:about='uuid:812079cd-ef9f-4bd1-bd63-16c35ef48e1b' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:ModifyDate='2004-12-28T14:19:37-05:00' xap:CreateDate='2004-12-28T14:19:24-05:00' xap:MetadataDate='2004-12-28T14:19:37-05:00'></rdf:Description>
<rdf:Description rdf:about='uuid:812079cd-ef9f-4bd1-bd63-16c35ef48e1b' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:3ad6be48-9b56-44c8-ab41-1936cc56d997'/>
<rdf:Description rdf:about='uuid:812079cd-ef9f-4bd1-bd63-16c35ef48e1b' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>lr splay step figure</rdf:li></rdf:Alt></dc:title></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
9 639 396 144 rectclip
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%ADOBeginSubsetFont: KDPENO+TimesNewRomanPS-ItalicMT Initial
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2004 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /KDPENO+TimesNewRomanPS-ItalicMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 120 /x put
dup 121 /y put
dup 122 /z put
def
/FontBBox {0 0 0 0} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD1638113E4B58C0B5F39100186722805B704
AA3988900AFCFF05DD> |-
/A <1C60D8A8C9B7D8BE190A9802974A4C1AA5E1AB8A0FFB01E4A47ABF2336F0
B7F1CBE59C6A88B7A18B3BB28E33891DB38D52F9AB7A997D51E39EC1D9F9BE0B
E55A7AA1F50F31DBC6010D51CC0B8B82324F65AC03A3772EDD9823B643587986
4B059D2E3324A28BCF13A698E07B0DC38EBFED8CD7D8B341345165854758E2CF
25BED4095D5BDD86297E1ED15868C4D3EB1DF94C3C9805DFD40CED066A5374BD> |-
/B <1C60D8A8C9B7D8BE161090B4306626FB679B706E6F4139B4B79C97463D9A
69CAF58AA09F4964EEC013B2FC4FA7699800B865D2071C68837730B9BC09153A
467C6987AA9EFAACC04FBFAD7BB080076F75C6C6273F57F6D0CEFC0279585E84
6C9D9E795ABD1D4349C960B4DBA9914AFCF36BC91E1F8F92C8C7274139F9D770
0EC2A27019841395968BFAB5CAE25E51DB74FC1DF6E905ED0B31DF219F96CB60
8A5B08C8661FD2FF160B5117F4A89DF5B01575674FBC169DBF2A343754930A87
B0715F70F21BA2751B8CDBFA7766DED836903D16234290F9C5A391A2569423D1
63F1ECE6C4E56278A98DF84129173A7291061237C29A314067AF9E9AE6> |-
/C <1C60D8A8C9B64EDFFAED57175A5527133421EBC21E76DBAB72ACCBE9103B
32DE3E656A165A65E9E2355845AEB7E09DA6E215018706AF7B889BE7E49F000F
A5830EB21A5EAF4CB6ED590C06E0E498B57B3D796FAE982CC67DEFCAB50BBE83
88E1AD2B73E137A2E5B3F021118B9D0E0F8E0263367F4EA42B3B0DAB36C4D910
060EDA039D6F9BADD9D5C901F008667A8BB691EF8D79CDA368B8ED3A1E406AF9
AE6ED0D182B9009F11361F5A89FC7840A3C9963B411D1FCF4E73561175> |-
/D <1C60D8A8C9B6079F62854094BF26E9B7298FE4611183B4D839C6F370BDDF
47C1369012E0825886C85BD73A5BE2E0E1F370D06D5D6366465C6BB4D62F438C
2BD2976BAECB5A60D3A497F9231D099C85D357A4E2EDAD28DE87B7E7B77455A6
38ED58C3A0D830CF4CFBC835003F58BDC156D99D03F6675D9F11933727E6CC88
C9D3A8483839F939323FC680EC9F764B0FE40594DE5AE22849C28596D6CF0144
1A9E094A08BFD99DAD9329B8C0988DF6557F0E1C03170E1DD16FD8EDC38042CE
9757E99BACF0A154651A0A7C0DDA75C26EEBBF252CA90050CA8D1C> |-
/x <1C60D8A8C9B77FE28E7B59861DA633FA42A38BF207DC4A11329E63F66801
0B05585B22E39E733F2B39E647F14D7DCD27965006EEC01D3FBB556E503629E4
5F186BD20587B6FF8BB4E525ABE63E26F210C9F85E012A8DB6F803B316624083
082E536A1274247334ADD37479C48FDB7D8ADD850A8832DF9217A2BFFEECF6DD
96F21564B9189ECF65AD0E783A58F9E296A99147AE132DD5B0142AB4EA574166
8F4195BDF7097E5D12CB419F2F282E538E1EB21217502E3C6B11740802EC650F
4D2ADCD4B1772219DAF6BE6429CF2030BDF9C05BA7A5D790670BD325C71A55CF
EDEE3AFA9492A129CF25024BDA2414AE27F397E2DB63BB72C98E3704AEDCD4D4
A43DA02887C90FEE11520BD99634849C2457543FCB5BD3F0> |-
/y <1C60D8A8C9B77FE2A5F6578EB74A5BFD70E96F53281130D42B07852DDCDE
D49DD330FC357D6058C03E8610E8E1D643E8CA0EBC7995F8BABA9747A0C2E2AC
A69173E30D3ACD29C808B16AC9A852CB62CBDD288A4A7E966451A68CB6890FD6
1B1EF6E37046C4AE362DFF52C05E5E0E60BC6A163B19979A909E3D594EE95DCB
C6E7C631883A0E99BDB5D8D9A3E3E1A27177F57AE523C60D5B87B9A8F95973B7
E240DB57053F25B7E2735427EEA7A7AB55075C8F2065CBC552B611C79F3A08A7
38B67D80BCFC3A017B83DD56AA10FE2705CDE9136F3729D089A4CE85B23F79FC
3F372F0C03CE3A67067C37B87214D407E8CDB95C04AC4E38F20F21F7B960D30F
D020> |-
/z <1C60D8A8C9B7361F404732742F0EED32CA3EA29407959CECAFE0E37518E2
27CFD4490596548B4B85CEEDDE1158F7428B01992531F92248F4654D99DA5EA9
1746C333B262696C063AC1B1A955C0B8290BD933B9CCC86F8D642636> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
[/N9/KDPENO+TimesNewRomanPS-ItalicMT 1 TZG
%ADOBeginSubsetFont: KDPFAI+TimesNewRomanPSMT Initial
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2004 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /KDPFAI+TimesNewRomanPSMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
def
/FontBBox {0 0 0 0} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72E
FEDBB222483BD74F8B> |-
/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F5
89D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C0272
0FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF
41DB28C0847307B8DCBC66> |-
/two <1C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B
4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25
003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0
F90EDDE709834FFBF963952A5213F1DDF75DF2C0C4ABBF998F7E8BA2741402DB
7F4B6E4BDAD8DEBF530764A38FF9AF0505> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
[/N12/KDPFAI+TimesNewRomanPSMT 1 TZG
9.0 639.0 396.0 144.0 re
W
n
n
64.559998 684.0 m
54.0 702.0 l
43.68 684.0 l
64.559998 684.0 l
1.0 1.0 1.0 setrgbcolor
eofill
1 J
1 j
0.72 w
n
64.559998 684.0 m
54.0 702.0 l
43.68 684.0 l
64.559998 684.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
50.880005 686.880005 m
/N9 [10.060303 0.0 0.0 10.080002 0.0 0.0] Tf
(A) show
n
91.439995 648.0 m
81.119995 666.0 l
70.800003 648.0 l
91.439995 648.0 l
1.0 1.0 1.0 setrgbcolor
eofill
n
91.439995 648.0 m
81.119995 666.0 l
70.800003 648.0 l
91.439995 648.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
78.0 650.880005 m
(B) show
n
145.440002 648.0 m
135.119995 666.0 l
124.800003 648.0 l
145.440002 648.0 l
1.0 1.0 1.0 setrgbcolor
eofill
n
145.440002 648.0 m
135.119995 666.0 l
124.800003 648.0 l
145.440002 648.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
131.759995 650.880005 m
(C) show
n
145.440002 720.0 m
135.119995 738.0 l
124.800003 720.0 l
145.440002 720.0 l
1.0 1.0 1.0 setrgbcolor
eofill
n
145.440002 720.0 m
135.119995 738.0 l
124.800003 720.0 l
145.440002 720.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
131.279999 722.880005 m
(D) show
n
262.559998 666.0 m
252.0 684.0 l
241.679993 666.0 l
262.559998 666.0 l
1.0 1.0 1.0 setrgbcolor
eofill
n
262.559998 666.0 m
252.0 684.0 l
241.679993 666.0 l
262.559998 666.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
248.87999 668.880005 m
(A) show
n
316.559998 666.0 m
306.0 684.0 l
295.679993 666.0 l
316.559998 666.0 l
1.0 1.0 1.0 setrgbcolor
eofill
n
316.559998 666.0 m
306.0 684.0 l
295.679993 666.0 l
316.559998 666.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
302.880005 668.880005 m
(B) show
n
343.440002 666.0 m
333.119995 684.0 l
322.800018 666.0 l
343.440002 666.0 l
1.0 1.0 1.0 setrgbcolor
eofill
n
343.440002 666.0 m
333.119995 684.0 l
322.800018 666.0 l
343.440002 666.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
329.759979 668.880005 m
(C) show
n
397.440002 666.0 m
387.119995 684.0 l
376.800018 666.0 l
397.440002 666.0 l
1.0 1.0 1.0 setrgbcolor
eofill
n
397.440002 666.0 m
387.119995 684.0 l
376.800018 666.0 l
397.440002 666.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
383.279999 668.880005 m
(D) show
n
72.0 746.880005 m
72.0 755.039978 77.519997 762.0 85.200005 764.159973 c
0.003922 0.003922 0.003922 setrgbcolor
S
n
90.0 764.880005 m
84.239998 760.799988 l
84.959999 762.959961 84.479996 765.359985 83.279999 767.279968 c
90.0 764.880005 l
eofill
0.0 sg
72.720001 761.519958 m
/N12 [5.589401 5.589401 -5.599701 5.599701 0.0 0.0] Tf
(2) show
2.16 w
n
189.119995 710.880005 m
217.919998 710.880005 l
0.003922 0.003922 0.003922 setrgbcolor
S
n
225.119995 710.880005 m
215.759995 706.320007 l
217.199997 709.200012 217.199997 712.559998 215.759995 715.679993 c
225.119995 710.880005 l
eofill
0.72 w
n
108.0 764.880005 m
81.119995 738.0 l
108.0 764.880005 m
135.119995 738.0 l
81.119995 728.880005 m
54.0 702.0 l
81.119995 728.880005 m
108.0 702.0 l
108.0 692.880005 m
81.119995 666.0 l
108.0 692.880005 m
135.119995 666.0 l
S
n
99.119995 692.880005 m
99.119995 697.919983 103.200005 702.0 108.0 702.0 c
113.040001 702.0 117.119995 697.919983 117.119995 692.880005 c
117.119995 687.839966 113.040001 684.0 108.0 684.0 c
103.200005 684.0 99.119995 687.839966 99.119995 692.880005 c
1.0 1.0 1.0  setrgbcolor
eofill
2.16 w
n
99.119995 692.880005 m
99.119995 697.919983 103.200005 702.0 108.0 702.0 c
113.040001 702.0 117.119995 697.919983 117.119995 692.880005 c
117.119995 687.839966 113.040001 684.0 108.0 684.0 c
103.200005 684.0 99.119995 687.839966 99.119995 692.880005 c
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
105.839996 690.0 m
/N9 [10.060303 0.0 0.0 10.080002 0.0 0.0] Tf
(x) show
n
99.119995 764.880005 m
99.119995 769.919983 103.200005 774.0 108.0 774.0 c
113.040001 774.0 117.119995 769.919983 117.119995 764.880005 c
117.119995 759.839966 113.040001 756.0 108.0 756.0 c
103.200005 756.0 99.119995 759.839966 99.119995 764.880005 c
1.0 1.0 1.0 setrgbcolor
eofill
0.72 w
n
99.119995 764.880005 m
99.119995 769.919983 103.200005 774.0 108.0 774.0 c
113.040001 774.0 117.119995 769.919983 117.119995 764.880005 c
117.119995 759.839966 113.040001 756.0 108.0 756.0 c
103.200005 756.0 99.119995 759.839966 99.119995 764.880005 c
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
106.080002 762.0 m
(z) show
n
72.0 728.880005 m
72.0 733.919983 76.080002 738.0 81.119995 738.0 c
86.159996 738.0 90.0 733.919983 90.0 728.880005 c
90.0 723.839966 86.159996 720.0 81.119995 720.0 c
76.080002 720.0 72.0 723.839966 72.0 728.880005 c
1.0 1.0 1.0 setrgbcolor
eofill
n
72.0 728.880005 m
72.0 733.919983 76.080002 738.0 81.119995 738.0 c
86.159996 738.0 90.0 733.919983 90.0 728.880005 c
90.0 723.839966 86.159996 720.0 81.119995 720.0 c
76.080002 720.0 72.0 723.839966 72.0 728.880005 c
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
78.720001 726.0 m
(y) show
n
103.919998 728.159973 m
111.839996 726.0 117.119995 719.039978 117.119995 710.880005 c
0.003922 0.003922 0.003922 setrgbcolor
S
n
99.119995 728.880005 m
106.079994 731.279968 l
104.639999 729.359985 104.400002 726.959961 105.119995 724.799988 c
99.119995 728.880005 l
eofill
0.0 sg
113.520004 728.400024 m
/N12 [5.589401 -5.589401 5.599701 5.599701 0.0 0.0] Tf
(1) show
n
319.679993 746.880005 m
279.119995 720.0 l
319.679993 746.880005 m
360.0 720.0 l
279.119995 710.880005 m
252.0 684.0 l
279.119995 710.880005 m
306.0 684.0 l
360.0 710.880005 m
333.119995 684.0 l
360.0 710.880005 m
387.119995 684.0 l
0.003922 0.003922 0.003922 setrgbcolor
S
n
310.559998 746.880005 m
310.559998 751.919983 314.639984 756.0 319.679993 756.0 c
324.47998 756.0 328.559998 751.919983 328.559998 746.880005 c
328.559998 741.839966 324.47998 738.0 319.679993 738.0 c
314.639984 738.0 310.559998 741.839966 310.559998 746.880005 c
1.0 1.0 1.0  setrgbcolor
eofill
2.16 w
n
310.559998 746.880005 m
310.559998 751.919983 314.639984 756.0 319.679993 756.0 c
324.47998 756.0 328.559998 751.919983 328.559998 746.880005 c
328.559998 741.839966 324.47998 738.0 319.679993 738.0 c
314.639984 738.0 310.559998 741.839966 310.559998 746.880005 c
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
317.279999 744.0 m
/N9 [10.060303 0.0 0.0 10.080002 0.0 0.0] Tf
(x) show
n
351.119995 710.880005 m
351.119995 715.919983 355.200012 720.0 360.0 720.0 c
365.039978 720.0 369.119995 715.919983 369.119995 710.880005 c
369.119995 705.839966 365.039978 702.0 360.0 702.0 c
355.200012 702.0 351.119995 705.839966 351.119995 710.880005 c
1.0 1.0 1.0 setrgbcolor
eofill
0.72 w
n
351.119995 710.880005 m
351.119995 715.919983 355.200012 720.0 360.0 720.0 c
365.039978 720.0 369.119995 715.919983 369.119995 710.880005 c
369.119995 705.839966 365.039978 702.0 360.0 702.0 c
355.200012 702.0 351.119995 705.839966 351.119995 710.880005 c
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
358.079987 708.0 m
(z) show
n
270.0 710.880005 m
270.0 715.919983 274.079987 720.0 279.119995 720.0 c
284.160004 720.0 288.0 715.919983 288.0 710.880005 c
288.0 705.839966 284.160004 702.0 279.119995 702.0 c
274.079987 702.0 270.0 705.839966 270.0 710.880005 c
1.0 1.0 1.0 setrgbcolor
eofill
n
270.0 710.880005 m
270.0 715.919983 274.079987 720.0 279.119995 720.0 c
284.160004 720.0 288.0 715.919983 288.0 710.880005 c
288.0 705.839966 284.160004 702.0 279.119995 702.0 c
274.079987 702.0 270.0 705.839966 270.0 710.880005 c
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
276.720001 708.0 m
(y) show
n
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF

%%EndDocument
 @endspecial 150 1630 a(Figure)30 b(3.2:)41 b Fl(The)35
b Fh(l)r(r)i Fl(spla)m(y)f(step:)41 b Fk(This)31 b(is)f(p)r(erformed)g
(when)g Fh(x)h Fk(is)f(a)g(righ)n(t)g(c)n(hild)g(and)g
Fh(x)p Fk('s)h(paren)n(t)e(is)h(a)g(left)150 1729 y(c)n(hild.)52
b(The)33 b(spla)n(y)f(step)h(consists)f(of)g(\014rst)h(a)f(left)i
(rotation)d(on)i Fh(y)i Fk(and)e(then)g(a)f(righ)n(t)g(rotation)g(on)g
Fh(z)t Fk(.)52 b(The)33 b Fh(r)r(l)150 1829 y Fk(spla)n(y)27
b(step,)g(for)g Fh(x)i Fk(b)r(eing)e(a)g(left)i(c)n(hild)e(and)h
Fh(x)p Fk('s)g(paren)n(t)f(b)r(eing)g(a)g(righ)n(t)g(c)n(hild,)h(is)g
(analogous.)750 2920 y @beginspecial 9 @llx 675 @lly
297 @urx 783 @ury 2880 @rwi @setspecial
%%BeginDocument: dzhang-splaystep-r.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (r splay step figure)
%%Version: 1 5
%%Creator: Adobe Acrobat 6.0
%%CreationDate: 14:30:57 12/28/04
%%DocumentData: Clean7Bit
%%BoundingBox: 9 675 297 783
%%HiResBoundingBox: 9.0 675.0 297.0 783.0
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L1 W0 vm op crd OS scsa t h ef bg ucr sf ef r b fa pr SEPS ttf HB  0


%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.18 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.18 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset l2compat 6.0 1
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
cvi
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset sep_ops 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/undefineRes {
null exch
defineRes
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 1086 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-13, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:cef2c08a-292e-447d-9435-4f2c37939969' xmlns:pdf='http://ns.adobe.com/pdf/1.3/'></rdf:Description>
<rdf:Description rdf:about='uuid:cef2c08a-292e-447d-9435-4f2c37939969' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:ModifyDate='2004-12-28T14:20:00-05:00' xap:CreateDate='2004-12-28T14:19:44-05:00' xap:MetadataDate='2004-12-28T14:20:00-05:00'></rdf:Description>
<rdf:Description rdf:about='uuid:cef2c08a-292e-447d-9435-4f2c37939969' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:e85a2f3e-391a-4dee-ab79-262dc2b7b5aa'/>
<rdf:Description rdf:about='uuid:cef2c08a-292e-447d-9435-4f2c37939969' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>r splay step figure</rdf:li></rdf:Alt></dc:title></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
9 675 288 108 rectclip
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%ADOBeginSubsetFont: QPOBAA+TimesNewRomanPS-ItalicMT Initial
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2004 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QPOBAA+TimesNewRomanPS-ItalicMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 120 /x put
dup 121 /y put
dup 122 /z put
def
/FontBBox {0 0 0 0} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD1638113E4B58C0B5F39100186722805B704
AA3988900AFCFF05DD> |-
/A <1C60D8A8C9B7D8BE190A9802974A4C1AA5E1AB8A0FFB01E4A47ABF2336F0
B7F1CBE59C6A88B7A18B3BB28E33891DB38D52F9AB7A997D51E39EC1D9F9BE0B
E55A7AA1F50F31DBC6010D51CC0B8B82324F65AC03A3772EDD9823B643587986
4B059D2E3324A28BCF13A698E07B0DC38EBFED8CD7D8B341345165854758E2CF
25BED4095D5BDD86297E1ED15868C4D3EB1DF94C3C9805DFD40CED066A5374BD> |-
/B <1C60D8A8C9B7D8BE161090B4306626FB679B706E6F4139B4B79C97463D9A
69CAF58AA09F4964EEC013B2FC4FA7699800B865D2071C68837730B9BC09153A
467C6987AA9EFAACC04FBFAD7BB080076F75C6C6273F57F6D0CEFC0279585E84
6C9D9E795ABD1D4349C960B4DBA9914AFCF36BC91E1F8F92C8C7274139F9D770
0EC2A27019841395968BFAB5CAE25E51DB74FC1DF6E905ED0B31DF219F96CB60
8A5B08C8661FD2FF160B5117F4A89DF5B01575674FBC169DBF2A343754930A87
B0715F70F21BA2751B8CDBFA7766DED836903D16234290F9C5A391A2569423D1
63F1ECE6C4E56278A98DF84129173A7291061237C29A314067AF9E9AE6> |-
/C <1C60D8A8C9B64EDFFAED57175A5527133421EBC21E76DBAB72ACCBE9103B
32DE3E656A165A65E9E2355845AEB7E09DA6E215018706AF7B889BE7E49F000F
A5830EB21A5EAF4CB6ED590C06E0E498B57B3D796FAE982CC67DEFCAB50BBE83
88E1AD2B73E137A2E5B3F021118B9D0E0F8E0263367F4EA42B3B0DAB36C4D910
060EDA039D6F9BADD9D5C901F008667A8BB691EF8D79CDA368B8ED3A1E406AF9
AE6ED0D182B9009F11361F5A89FC7840A3C9963B411D1FCF4E73561175> |-
/D <1C60D8A8C9B6079F62854094BF26E9B7298FE4611183B4D839C6F370BDDF
47C1369012E0825886C85BD73A5BE2E0E1F370D06D5D6366465C6BB4D62F438C
2BD2976BAECB5A60D3A497F9231D099C85D357A4E2EDAD28DE87B7E7B77455A6
38ED58C3A0D830CF4CFBC835003F58BDC156D99D03F6675D9F11933727E6CC88
C9D3A8483839F939323FC680EC9F764B0FE40594DE5AE22849C28596D6CF0144
1A9E094A08BFD99DAD9329B8C0988DF6557F0E1C03170E1DD16FD8EDC38042CE
9757E99BACF0A154651A0A7C0DDA75C26EEBBF252CA90050CA8D1C> |-
/x <1C60D8A8C9B77FE28E7B59861DA633FA42A38BF207DC4A11329E63F66801
0B05585B22E39E733F2B39E647F14D7DCD27965006EEC01D3FBB556E503629E4
5F186BD20587B6FF8BB4E525ABE63E26F210C9F85E012A8DB6F803B316624083
082E536A1274247334ADD37479C48FDB7D8ADD850A8832DF9217A2BFFEECF6DD
96F21564B9189ECF65AD0E783A58F9E296A99147AE132DD5B0142AB4EA574166
8F4195BDF7097E5D12CB419F2F282E538E1EB21217502E3C6B11740802EC650F
4D2ADCD4B1772219DAF6BE6429CF2030BDF9C05BA7A5D790670BD325C71A55CF
EDEE3AFA9492A129CF25024BDA2414AE27F397E2DB63BB72C98E3704AEDCD4D4
A43DA02887C90FEE11520BD99634849C2457543FCB5BD3F0> |-
/y <1C60D8A8C9B77FE2A5F6578EB74A5BFD70E96F53281130D42B07852DDCDE
D49DD330FC357D6058C03E8610E8E1D643E8CA0EBC7995F8BABA9747A0C2E2AC
A69173E30D3ACD29C808B16AC9A852CB62CBDD288A4A7E966451A68CB6890FD6
1B1EF6E37046C4AE362DFF52C05E5E0E60BC6A163B19979A909E3D594EE95DCB
C6E7C631883A0E99BDB5D8D9A3E3E1A27177F57AE523C60D5B87B9A8F95973B7
E240DB57053F25B7E2735427EEA7A7AB55075C8F2065CBC552B611C79F3A08A7
38B67D80BCFC3A017B83DD56AA10FE2705CDE9136F3729D089A4CE85B23F79FC
3F372F0C03CE3A67067C37B87214D407E8CDB95C04AC4E38F20F21F7B960D30F
D020> |-
/z <1C60D8A8C9B7361F404732742F0EED32CA3EA29407959CECAFE0E37518E2
27CFD4490596548B4B85CEEDDE1158F7428B01992531F92248F4654D99DA5EA9
1746C333B262696C063AC1B1A955C0B8290BD933B9CCC86F8D642636> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
[/N9/QPOBAA+TimesNewRomanPS-ItalicMT 1 TZG
%ADOBeginSubsetFont: PFJBAA+TimesNewRomanPSMT Initial
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2004 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /PFJBAA+TimesNewRomanPSMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
def
/FontBBox {0 0 0 0} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72E
FEDBB222483BD74F8B> |-
/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F5
89D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C0272
0FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF
41DB28C0847307B8DCBC66> |-
/two <1C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B
4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25
003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0
F90EDDE709834FFBF963952A5213F1DDF75DF2C0C4ABBF998F7E8BA2741402DB
7F4B6E4BDAD8DEBF530764A38FF9AF0505> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
[/N12/PFJBAA+TimesNewRomanPSMT 1 TZG
9.0 675.0 288.0 108.0 re
W
n
n
37.439999 684.0 m
27.119999 702.0 l
16.800001 684.0 l
37.439999 684.0 l
1.0 1.0 1.0 setrgbcolor
eofill
1 J
1 j
0.72 w
n
37.439999 684.0 m
27.119999 702.0 l
16.800001 684.0 l
37.439999 684.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
24.0 686.880005 m
/N9 [10.060303 0.0 0.0 10.080002 0.0 0.0] Tf
(A) show
n
91.439995 684.0 m
81.119995 702.0 l
70.800003 684.0 l
91.439995 684.0 l
1.0 1.0 1.0 setrgbcolor
eofill
n
91.439995 684.0 m
81.119995 702.0 l
70.800003 684.0 l
91.439995 684.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
78.0 686.880005 m
(B) show
n
118.559998 720.0 m
108.0 738.0 l
97.68 720.0 l
118.559998 720.0 l
1.0 1.0 1.0 setrgbcolor
eofill
n
118.559998 720.0 m
108.0 738.0 l
97.68 720.0 l
118.559998 720.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
104.639999 722.880005 m
(C) show
n
81.119995 764.880005 m
54.0 738.0 l
81.119995 764.880005 m
108.0 738.0 l
54.0 728.880005 m
27.119999 702.0 l
54.0 728.880005 m
81.119995 702.0 l
0.003922 0.003922 0.003922 setrgbcolor
S
n
45.119999 728.880005 m
45.119999 733.919983 49.200001 738.0 54.0 738.0 c
59.039997 738.0 63.119999 733.919983 63.119999 728.880005 c
63.119999 723.839966 59.039997 720.0 54.0 720.0 c
49.200001 720.0 45.119999 723.839966 45.119999 728.880005 c
1.0 1.0 1.0  setrgbcolor
eofill
2.16 w
n
45.119999 728.880005 m
45.119999 733.919983 49.200001 738.0 54.0 738.0 c
59.039997 738.0 63.119999 733.919983 63.119999 728.880005 c
63.119999 723.839966 59.039997 720.0 54.0 720.0 c
49.200001 720.0 45.119999 723.839966 45.119999 728.880005 c
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
51.839996 726.0 m
(x) show
n
72.0 764.880005 m
72.0 769.919983 76.080002 774.0 81.119995 774.0 c
86.159996 774.0 90.0 769.919983 90.0 764.880005 c
90.0 759.839966 86.159996 756.0 81.119995 756.0 c
76.080002 756.0 72.0 759.839966 72.0 764.880005 c
1.0 1.0 1.0 setrgbcolor
eofill
0.72 w
n
72.0 764.880005 m
72.0 769.919983 76.080002 774.0 81.119995 774.0 c
86.159996 774.0 90.0 769.919983 90.0 764.880005 c
90.0 759.839966 86.159996 756.0 81.119995 756.0 c
76.080002 756.0 72.0 759.839966 72.0 764.880005 c
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
78.720001 762.0 m
(y) show
n
208.559998 720.0 m
198.0 738.0 l
187.679993 720.0 l
208.559998 720.0 l
1.0 1.0 1.0 setrgbcolor
eofill
n
208.559998 720.0 m
198.0 738.0 l
187.679993 720.0 l
208.559998 720.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
194.87999 722.880005 m
(A) show
n
235.439987 684.0 m
225.119995 702.0 l
214.800003 684.0 l
235.439987 684.0 l
1.0 1.0 1.0 setrgbcolor
eofill
n
235.439987 684.0 m
225.119995 702.0 l
214.800003 684.0 l
235.439987 684.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
222.0 686.880005 m
(B) show
n
289.440002 684.0 m
279.119995 702.0 l
268.800018 684.0 l
289.440002 684.0 l
1.0 1.0 1.0 setrgbcolor
eofill
n
289.440002 684.0 m
279.119995 702.0 l
268.800018 684.0 l
289.440002 684.0 l
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
275.759979 686.880005 m
(C) show
n
225.119995 764.880005 m
198.0 738.0 l
225.119995 764.880005 m
252.0 738.0 l
252.0 728.880005 m
225.119995 702.0 l
252.0 728.880005 m
279.119995 702.0 l
0.003922 0.003922 0.003922 setrgbcolor
S
n
216.0 764.880005 m
216.0 769.919983 220.080002 774.0 225.119995 774.0 c
230.159988 774.0 234.0 769.919983 234.0 764.880005 c
234.0 759.839966 230.159988 756.0 225.119995 756.0 c
220.080002 756.0 216.0 759.839966 216.0 764.880005 c
1.0 1.0 1.0  setrgbcolor
eofill
2.16 w
n
216.0 764.880005 m
216.0 769.919983 220.080002 774.0 225.119995 774.0 c
230.159988 774.0 234.0 769.919983 234.0 764.880005 c
234.0 759.839966 230.159988 756.0 225.119995 756.0 c
220.080002 756.0 216.0 759.839966 216.0 764.880005 c
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
222.720001 762.0 m
(x) show
n
243.119995 728.880005 m
243.119995 733.919983 247.199997 738.0 252.0 738.0 c
257.040009 738.0 261.119995 733.919983 261.119995 728.880005 c
261.119995 723.839966 257.040009 720.0 252.0 720.0 c
247.199997 720.0 243.119995 723.839966 243.119995 728.880005 c
1.0 1.0 1.0 setrgbcolor
eofill
0.72 w
n
243.119995 728.880005 m
243.119995 733.919983 247.199997 738.0 252.0 738.0 c
257.040009 738.0 261.119995 733.919983 261.119995 728.880005 c
261.119995 723.839966 257.040009 720.0 252.0 720.0 c
247.199997 720.0 243.119995 723.839966 243.119995 728.880005 c
h
0.003922 0.003922 0.003922  setrgbcolor
S
0.0 sg
249.839996 726.0 m
(y) show
n
45.119999 746.880005 m
45.119999 755.039978 50.400002 762.0 58.32 764.159973 c
0.003922 0.003922 0.003922 setrgbcolor
S
n
63.119999 764.880005 m
57.119999 760.799988 l
57.84 762.959961 57.600002 765.359985 56.16 767.279968 c
63.119999 764.880005 l
eofill
0.0 sg
45.600006 761.519958 m
/N12 [5.589401 5.589401 -5.599701 5.599701 0.0 0.0] Tf
(1) show
2.16 w
n
135.119995 728.880005 m
163.919998 728.880005 l
0.003922 0.003922 0.003922 setrgbcolor
S
n
171.119995 728.880005 m
161.759995 724.320007 l
163.199997 727.200012 163.199997 730.559998 161.759995 733.679993 c
171.119995 728.880005 l
eofill
n
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF

%%EndDocument
 @endspecial 150 3102 a(Figure)g(3.3:)37 b Fl(The)c Fh(r)j
Fl(spla)m(y)d(step:)k Fk(This)28 b(is)h(p)r(erformed)e(when)i
Fh(x)g Fk(is)f(the)h(left)g(c)n(hild)f(of)h(the)f(ro)r(ot)g
Fh(y)s Fk(.)39 b(The)28 b(spla)n(y)150 3202 y(step)d(consists)g(of)g(a)
f(righ)n(t)h(rotation)f(on)g(the)i(ro)r(ot.)35 b(The)25
b Fh(l)i Fk(spla)n(y)d(step,)i(for)e Fh(x)i Fk(b)r(eing)f(the)h(righ)n
(t)e(c)n(hild)h(of)g(the)h(ro)r(ot,)150 3301 y(is)h(analogous.)275
3633 y Ff(\017)41 b Fk(a)27 b(constan)n(t)g Fe(weight)36
b Fh(w)r Fk(\()p Fh(x)p Fk(\))25 b Fh(>)e Fk(0)k(\(for)g(the)h
(analysis,)e(this)i(can)f(b)r(e)h(arbitrary\))275 3791
y Ff(\017)41 b Fe(weight)28 b(sum)i Fh(s)p Fk(\()p Fh(x)p
Fk(\))24 b(=)1051 3728 y Fd(P)1139 3820 y Fc(y)r Fb(2)p
Fk(subtree)o Fa(\()p Fc(x)p Fa(\))1590 3791 y Fh(w)r
Fk(\()p Fh(y)s Fk(\))i(\(where)f(subtree)o(\()p Fh(x)p
Fk(\))h(is)f(the)g(subtree)g(ro)r(oted)f(at)h Fh(x)p
Fk(,)h(including)358 3905 y Fh(x)p Fk(\))275 4063 y Ff(\017)41
b Fe(r)l(ank)36 b Fh(r)r Fk(\()p Fh(x)p Fk(\))25 b(=)e(log)14
b Fh(s)p Fk(\()p Fh(x)p Fk(\))150 4283 y(W)-7 b(e)35
b(use)f Fh(r)r Fk(\()p Fh(x)p Fk(\))j(as)c(the)i(p)r(oten)n(tial)g(of)f
(a)g(no)r(de.)58 b(The)34 b(p)r(oten)n(tial)h(function)g(after)f
Fh(i)g Fk(op)r(erations)f(is)i(th)n(us)f Fh(\036)p Fk(\()p
Fh(i)p Fk(\))h(=)150 4320 y Fd(P)238 4407 y Fc(x)p Fb(2)p
Fk(tree)477 4383 y Fh(r)r Fk(\()p Fh(x)p Fk(\).)150 4615
y Fl(Lemma)d(1)41 b Fe(The)33 b(amortize)l(d)g(c)l(ost)g(of)g(a)f
(splay)i(step)e(on)h(no)l(de)g Fh(x)f Fe(is)h Ff(\024)27
b Fk(3\()p Fh(r)2561 4585 y Fb(0)2585 4615 y Fk(\()p
Fh(x)p Fk(\))21 b Ff(\000)f Fh(r)r Fk(\()p Fh(x)p Fk(\)\))j(+)c(1)p
Fe(,)33 b(wher)l(e)g Fh(r)i Fe(is)e(r)l(ank)150 4715
y(b)l(efor)l(e)f(the)f(splay)i(step)e(and)g Fh(r)1115
4685 y Fb(0)1170 4715 y Fe(is)h(r)l(ank)f(after)h(the)f(splay)h(step.)
43 b(F)-6 b(urthermor)l(e,)32 b(the)f(amortize)l(d)h(c)l(ost)f(of)h
(the)f Fh(r)r(r)r Fe(,)150 4814 y Fh(l)r(l)r Fe(,)e Fh(l)r(r)r
Fe(,)h(and)h Fh(r)r(l)g Fe(splay)g(steps)f(is)g Ff(\024)23
b Fk(3\()p Fh(r)1342 4784 y Fb(0)1366 4814 y Fk(\()p
Fh(x)p Fk(\))c Ff(\000)f Fh(r)r Fk(\()p Fh(x)p Fk(\)\))p
Fe(.)150 5047 y Fl(Pro)s(of:)p eop end
%%Page: 3 3
TeXDict begin 3 2 bop 150 40 a Fg(Lecture)27 b(3:)37
b(09/12/2005)2666 b Fk(3-3)150 330 y(W)-7 b(e)29 b(will)g(consider)f
(only)h(the)g Fh(r)r(r)j Fk(spla)n(y)c(step)h(\(refer)g(to)g(Figure)f
(3.1\).)40 b(The)29 b(actual)f(cost)h(of)g(the)g(spla)n(y)f(step)h(is)f
(2)150 430 y(\(for)h(2)f(rotations\).)40 b(The)29 b(spla)n(y)f(step)i
(only)e(a\013ects)h(the)g(p)r(oten)n(tials/ranks)e(of)i(no)r(des)g
Fh(x)p Fk(,)h Fh(y)s Fk(,)f(and)g Fh(z)t Fk(;)g(w)n(e)g(observ)n(e)150
529 y(that)f Fh(r)369 499 y Fb(0)393 529 y Fk(\()p Fh(x)p
Fk(\))c(=)f Fh(r)r Fk(\()p Fh(z)t Fk(\),)28 b Fh(r)r
Fk(\()p Fh(y)s Fk(\))c Ff(\025)f Fh(r)r Fk(\()p Fh(x)p
Fk(\),)29 b(and)f Fh(r)1475 499 y Fb(0)1499 529 y Fk(\()p
Fh(y)s Fk(\))23 b Ff(\024)g Fh(r)1757 499 y Fb(0)1781
529 y Fk(\()p Fh(x)p Fk(\).)150 700 y(The)28 b(amortized)e(cost)h(of)h
(the)g(spla)n(y)f(step)g(is)h(th)n(us:)698 883 y(amortized)f(cost)82
b(=)h(2)18 b(+)g Fh(\036)p Fk(\()p Fh(i)h Fk(+)f(1\))g
Ff(\000)g Fh(\036)p Fk(\()p Fh(i)p Fk(\))1312 1007 y(=)83
b(2)18 b(+)g(\()p Fh(r)1674 973 y Fb(0)1698 1007 y Fk(\()p
Fh(x)p Fk(\))i(+)e Fh(r)1951 973 y Fb(0)1975 1007 y Fk(\()p
Fh(y)s Fk(\))g(+)g Fh(r)2223 973 y Fb(0)2247 1007 y Fk(\()p
Fh(z)t Fk(\)\))h Ff(\000)f Fk(\()p Fh(r)r Fk(\()p Fh(x)p
Fk(\))j(+)d Fh(r)r Fk(\()p Fh(y)s Fk(\))h Ff(\000)f Fh(r)r
Fk(\()p Fh(z)t Fk(\)\))1312 1132 y(=)83 b(2)18 b(+)g(\()p
Fh(r)1674 1097 y Fb(0)1698 1132 y Fk(\()p Fh(x)p Fk(\))i
Ff(\000)e Fh(r)r Fk(\()p Fh(z)t Fk(\)\))h(+)f Fh(r)2231
1097 y Fb(0)2255 1132 y Fk(\()p Fh(y)s Fk(\))h(+)f Fh(r)2504
1097 y Fb(0)2528 1132 y Fk(\()p Fh(z)t Fk(\))g Ff(\000)g
Fh(r)r Fk(\()p Fh(x)p Fk(\))i Ff(\000)e Fh(r)r Fk(\()p
Fh(y)s Fk(\))1312 1256 y Ff(\024)83 b Fk(2)18 b(+)g(0)g(+)g
Fh(r)1785 1222 y Fb(0)1809 1256 y Fk(\()p Fh(x)p Fk(\))h(+)f
Fh(r)2061 1222 y Fb(0)2085 1256 y Fk(\()p Fh(z)t Fk(\))h
Ff(\000)f Fh(r)r Fk(\()p Fh(x)p Fk(\))i Ff(\000)e Fh(r)r
Fk(\()p Fh(x)p Fk(\))1312 1381 y(=)83 b(2)18 b(+)g Fh(r)1642
1346 y Fb(0)1666 1381 y Fk(\()p Fh(x)p Fk(\))h(+)f Fh(r)1918
1346 y Fb(0)1942 1381 y Fk(\()p Fh(z)t Fk(\))h Ff(\000)f
Fk(2)p Fh(r)r Fk(\()p Fh(x)p Fk(\))150 1634 y(The)29
b(log)g(function)g(is)g(conca)n(v)n(e,)f(i.e.,)1370 1597
y Fa(log)12 b Fc(a)p Fa(+log)g Fc(b)p 1370 1615 311 4
v 1509 1663 a Fa(2)1716 1634 y Ff(\024)25 b Fk(log)1927
1567 y Fd(\000)1975 1602 y Fc(a)p Fa(+)p Fc(b)p 1975
1616 117 4 v 2017 1663 a Fa(2)2102 1567 y Fd(\001)2140
1634 y Fk(.)41 b(Th)n(us)29 b(w)n(e)g(also)f(ha)n(v)n(e)g(\()p
Fh(s)i Fk(is)f(w)n(eigh)n(t)f(sum)h(b)r(efore)150 1734
y(the)f(spla)n(y)f(step)g(and)h Fh(s)882 1704 y Fb(0)933
1734 y Fk(is)f(w)n(eigh)n(t)g(sum)h(after)f(the)h(spla)n(y)f(step\):)
535 1910 y(log\()p Fh(s)p Fk(\()p Fh(x)p Fk(\)\))20 b(+)e(log)q(\()p
Fh(s)1138 1880 y Fb(0)1161 1910 y Fk(\()p Fh(z)t Fk(\)\))p
535 1947 766 4 v 897 2023 a(2)1393 1966 y Ff(\024)83
b Fk(log)1662 1849 y Fd(\022)1733 1910 y Fh(s)p Fk(\()p
Fh(x)p Fk(\))19 b(+)f Fh(s)2024 1880 y Fb(0)2048 1910
y Fk(\()p Fh(z)t Fk(\))p 1733 1947 422 4 v 1923 2023
a(2)2164 1849 y Fd(\023)877 2143 y Fh(r)r Fk(\()p Fh(x)p
Fk(\))i(+)e Fh(r)1169 2113 y Fb(0)1193 2143 y Fk(\()p
Fh(z)t Fk(\))p 877 2180 424 4 v 1068 2256 a(2)1393 2199
y Ff(\024)83 b Fk(log)1662 2082 y Fd(\022)1733 2143 y
Fh(s)p Fk(\()p Fh(x)p Fk(\))19 b(+)f Fh(s)2024 2113 y
Fb(0)2048 2143 y Fk(\()p Fh(z)t Fk(\))p 1733 2180 422
4 v 1923 2256 a(2)2164 2082 y Fd(\023)2239 2199 y Fk(\(note)28
b(that)g Fh(s)p Fk(\()p Fh(x)p Fk(\))19 b(+)f Fh(s)2927
2169 y Fb(0)2951 2199 y Fk(\()p Fh(z)t Fk(\))23 b Ff(\024)f
Fh(s)3207 2169 y Fb(0)3230 2199 y Fk(\()p Fh(x)p Fk(\)\))1393
2431 y Ff(\024)83 b Fk(log)1662 2314 y Fd(\022)1733 2375
y Fh(s)1772 2345 y Fb(0)1795 2375 y Fk(\()p Fh(x)p Fk(\))p
1733 2412 175 4 v 1799 2488 a(2)1917 2314 y Fd(\023)1393
2610 y Fk(=)g Fh(r)1580 2576 y Fb(0)1604 2610 y Fk(\()p
Fh(x)p Fk(\))19 b Ff(\000)f Fk(1)1140 2734 y Fh(r)1179
2700 y Fb(0)1203 2734 y Fk(\()p Fh(z)t Fk(\))83 b Ff(\024)g
Fk(2)p Fh(r)1622 2700 y Fb(0)1645 2734 y Fk(\()p Fh(x)p
Fk(\))20 b Ff(\000)e Fh(r)r Fk(\()p Fh(x)p Fk(\))i Ff(\000)e
Fk(2)150 2988 y(Th)n(us)27 b(the)h(amortized)f(cost)g(of)h(the)g
Fh(r)r(r)j Fk(spla)n(y)26 b(step)i(is)g Ff(\024)22 b
Fk(3\()p Fh(r)2079 2958 y Fb(0)2103 2988 y Fk(\()p Fh(x)p
Fk(\))e Ff(\000)e Fh(r)r Fk(\()p Fh(x)p Fk(\)\).)150
3158 y(The)34 b(same)f(inequalit)n(y)h(m)n(ust)g(hold)f(for)h(the)g
Fh(l)r(l)h Fk(spla)n(y)e(step;)k(the)d(inequalit)n(y)g(also)e(holds)i
(for)f(the)h Fh(l)r(r)j Fk(\(and)d Fh(r)r(l)r Fk(\))150
3258 y(spla)n(y)27 b(steps.)36 b(The)28 b(+1)f(in)h(the)g(lemma)f
(applies)g(for)g(the)h Fh(r)j Fk(and)c Fh(l)i Fk(cases.)p
150 3429 59 59 v 150 3782 a Fl(Corollary)j(1)41 b Fe(The)31
b(amortize)l(d)g(c)l(ost)e(of)i(a)f(splay)h(op)l(er)l(ation)g(on)f(no)l
(de)g Fh(x)g Fe(is)g Fh(O)r Fk(\(log)15 b Fh(n)p Fk(\))p
Fe(.)150 4035 y Fl(Pro)s(of:)150 4206 y Fk(The)25 b(amortized)g(cost)g
(of)g(a)g(spla)n(y)f(op)r(eration)g(on)i Fh(x)f Fk(is)h(the)f(sum)h(of)
f(the)h(amortized)e(costs)h(of)g(the)h(spla)n(y)e(steps)h(on)150
4305 y Fh(x)j Fk(in)n(v)n(olv)n(ed:)1084 4488 y(amortized)e(cost)83
b(=)1845 4409 y Fd(X)1894 4586 y Fc(i)1979 4488 y Fk(cost\(spla)n(y)p
2346 4488 25 4 v 29 w(step)2518 4508 y Fc(i)2545 4488
y Fk(\))1698 4715 y Ff(\024)1845 4636 y Fd(X)1894 4813
y Fc(i)1979 4647 y Fd(\000)2017 4715 y Fk(3\()p Fh(r)2130
4680 y Fc(i)p Fa(+1)2242 4715 y Fk(\()p Fh(x)p Fk(\))20
b Ff(\000)e Fh(r)2495 4680 y Fc(i)2523 4715 y Fk(\()p
Fh(x)p Fk(\))2634 4647 y Fd(\001)2692 4715 y Fk(+)g(1)1698
4916 y(=)82 b(3\()p Fh(r)r Fk(\(ro)r(ot\))19 b Ff(\000)f
Fh(r)r Fk(\()p Fh(x)p Fk(\)\))j(+)d(1)p eop end
%%Page: 4 4
TeXDict begin 4 3 bop 150 40 a Fg(Lecture)27 b(3:)37
b(09/12/2005)2666 b Fk(3-4)150 330 y(The)29 b(+1)e(comes)h(from)g(the)h
(last)g Fh(r)i Fk(or)d Fh(l)i Fk(spla)n(y)d(step)i(\(if)g(necessary\).)
39 b(If)29 b(w)n(e)f(set)g Fh(w)r Fk(\()p Fh(x)p Fk(\))f(=)d(1)k(for)g
(all)h(no)r(des)f(in)h(the)150 430 y(tree,)e(then)h Fh(r)r
Fk(\(ro)r(ot)q(\))23 b(=)g(log)14 b Fh(n)27 b Fk(and)h(w)n(e)f(ha)n(v)n
(e:)1239 610 y(amortized)f(cost)d Ff(\024)f Fk(3)14 b(log)g
Fh(n)k Fk(+)g(1)23 b(=)f Fh(O)r Fk(\(log)15 b Fh(n)p
Fk(\))p 150 861 59 59 v 150 1304 a Fi(3.3)135 b(Analysis)46
b(of)f(Spla)l(y)g(T)-11 b(ree)45 b(Op)t(erations)150
1573 y Fj(3.3.1)112 b(Find)150 1797 y Fk(F)-7 b(or)32
b(the)g(\014nd)h(op)r(eration,)g(w)n(e)f(p)r(erform)f(a)h(normal)g(BST)
g(\014nd)h(follo)n(w)n(ed)e(b)n(y)h(a)g(spla)n(y)f(op)r(eration)g(on)h
(the)h(no)r(de)150 1897 y(found)26 b(\(or)e(the)i(leaf)f(no)r(de)h
(last)f(encoun)n(tered,)g(if)h(the)f(k)n(ey)g(w)n(as)f(not)i(found\).)
36 b(W)-7 b(e)26 b(can)f(c)n(harge)e(the)j(cost)f(of)g(going)150
1997 y(do)n(wn)i(the)h(tree)f(to)h(the)g(spla)n(y)e(op)r(eration.)36
b(Th)n(us)28 b(the)g(amortized)e(cost)h(of)h(\014nd)g(is)f
Fh(O)r Fk(\(log)15 b Fh(n)p Fk(\).)150 2299 y Fj(3.3.2)112
b(Insert)150 2524 y Fk(F)-7 b(or)24 b(the)h(insert)f(op)r(eration,)h(w)
n(e)f(p)r(erform)g(a)g(normal)g(BST)h(insert)f(follo)n(w)n(ed)g(b)n(y)g
(a)g(spla)n(y)g(op)r(eration)g(on)g(the)h(no)r(de)150
2623 y(inserted.)36 b(Assume)25 b(no)r(de)g Fh(x)h Fk(is)f(inserted)f
(at)h(depth)h Fh(k)s Fk(.)36 b(Denote)25 b(the)h(paren)n(t)e(of)h
Fh(x)h Fk(as)e Fh(y)2887 2635 y Fa(1)2924 2623 y Fk(,)i
Fh(y)3014 2635 y Fa(1)3051 2623 y Fk('s)f(paren)n(t)f(as)h
Fh(y)3531 2635 y Fa(2)3568 2623 y Fk(,)g(and)150 2723
y(so)f(on)h(\(the)h(ro)r(ot)e(of)h(the)h(tree)e(is)h
Fh(y)1228 2735 y Fc(k)1269 2723 y Fk(\).)36 b(Then)26
b(the)f(c)n(hange)f(in)h(p)r(oten)n(tial)g(due)g(to)g(the)h(insertion)e
(of)h Fh(x)h Fk(is)f(\()p Fh(r)j Fk(is)d(rank)150 2822
y(b)r(efore)i(the)h(insertion)f(and)h Fh(r)1085 2792
y Fb(0)1136 2822 y Fk(is)g(rank)f(after)g(the)h(insertion,)f
Fh(s)g Fk(is)h(w)n(eigh)n(t)f(sum)h(b)r(efore)f(the)h(insertion\):)837
3085 y(\001)p Fh(\036)84 b Fk(=)1228 2981 y Fc(k)1187
3006 y Fd(X)1189 3183 y Fc(j)s Fa(=1)1320 3085 y Fk(\()q
Fh(r)1392 3050 y Fb(0)1416 3085 y Fk(\()p Fh(y)1489 3097
y Fc(j)1524 3085 y Fk(\))18 b Ff(\000)g Fh(r)r Fk(\()p
Fh(y)1769 3097 y Fc(j)1805 3085 y Fk(\)\))1039 3388 y(=)1228
3284 y Fc(k)1187 3309 y Fd(X)1189 3486 y Fc(j)s Fa(=1)1320
3388 y Fk(\()q(log\()p Fh(s)p Fk(\()p Fh(y)1604 3400
y Fc(j)1639 3388 y Fk(\))h(+)f(1\))g Ff(\000)g Fk(log\()p
Fh(s)p Fk(\()p Fh(y)2199 3400 y Fc(j)2235 3388 y Fk(\)\))1039
3691 y(=)1228 3587 y Fc(k)1187 3612 y Fd(X)1189 3789
y Fc(j)s Fa(=1)1320 3691 y Fk(log)1441 3574 y Fd(\022)1513
3635 y Fh(s)p Fk(\()p Fh(y)1625 3647 y Fc(j)1659 3635
y Fk(\))h(+)f(1)p 1513 3672 323 4 v 1584 3748 a Fh(s)p
Fk(\()p Fh(y)1696 3760 y Fc(j)1731 3748 y Fk(\))1845
3574 y Fd(\023)1039 4012 y Fk(=)83 b(log)1308 3845 y
Fd(0)1308 3995 y(@)1419 3908 y Fc(k)1385 3933 y Fd(Y)1380
4110 y Fc(j)s Fa(=1)1519 3956 y Fh(s)p Fk(\()p Fh(y)1631
3968 y Fc(j)1666 3956 y Fk(\))19 b(+)f(1)p 1519 3993
V 1591 4069 a Fh(s)p Fk(\()p Fh(y)1703 4081 y Fc(j)1737
4069 y Fk(\))1851 3845 y Fd(1)1851 3995 y(A)1938 4012
y Fk(\(note)27 b(that)h Fh(s)p Fk(\()p Fh(y)2446 4024
y Fc(j)2481 4012 y Fk(\))19 b(+)f(1)23 b Ff(\024)f Fh(s)p
Fk(\()p Fh(y)2879 4024 y Fc(j)s Fa(+1)2998 4012 y Fk(\)\))1039
4294 y Ff(\024)83 b Fk(log)1308 4177 y Fd(\022)1379 4238
y Fh(s)p Fk(\()p Fh(y)1491 4250 y Fa(2)1528 4238 y Fk(\))p
1379 4275 182 4 v 1379 4351 a Fh(s)p Fk(\()p Fh(y)1491
4363 y Fa(1)1528 4351 y Fk(\))1589 4294 y Ff(\001)1640
4238 y Fh(s)p Fk(\()p Fh(y)1752 4250 y Fa(3)1789 4238
y Fk(\))p 1640 4275 V 1640 4351 a Fh(s)p Fk(\()p Fh(y)1752
4363 y Fa(2)1789 4351 y Fk(\))1845 4294 y Ff(\001)14
b(\001)g(\001)2008 4238 y Fh(s)p Fk(\()p Fh(y)2120 4250
y Fc(k)2161 4238 y Fk(\))p 1966 4275 271 4 v 1966 4351
a Fh(s)p Fk(\()p Fh(y)2078 4363 y Fc(k)q Fb(\000)p Fa(1)2204
4351 y Fk(\))2264 4294 y Ff(\001)2316 4238 y Fh(s)p Fk(\()p
Fh(y)2428 4250 y Fc(k)2469 4238 y Fk(\))k(+)g(1)p 2316
4275 329 4 v 2387 4351 a Fh(s)p Fk(\()p Fh(y)2499 4363
y Fc(k)2540 4351 y Fk(\))2654 4177 y Fd(\023)1039 4527
y Fk(=)83 b(log)1308 4410 y Fd(\022)1379 4471 y Fh(s)p
Fk(\()p Fh(y)1491 4483 y Fc(k)1532 4471 y Fk(\))18 b(+)g(1)p
1379 4508 V 1450 4584 a Fh(s)p Fk(\()p Fh(y)1562 4596
y Fc(k)1603 4584 y Fk(\))1717 4410 y Fd(\023)1039 4696
y Ff(\024)83 b Fk(log)14 b Fh(n)150 4948 y Fk(The)29
b(amortized)f(cost)g(of)h(the)g(spla)n(y)e(op)r(eration)h(is)h(also)e
Fh(O)r Fk(\(log)15 b Fh(n)p Fk(\),)30 b(and)e(th)n(us)h(the)g
(amortized)f(cost)g(of)h(insert)f(is)150 5047 y Fh(O)r
Fk(\(log)15 b Fh(n)p Fk(\).)p eop end
%%Page: 5 5
TeXDict begin 5 4 bop 150 40 a Fg(Lecture)27 b(3:)37
b(09/12/2005)2666 b Fk(3-5)150 330 y(W)-7 b(e)28 b(ha)n(v)n(e)e(pro)n
(v)n(ed)g(the)i(follo)n(wing:)150 584 y Fl(Theorem)j(1)42
b Fe(A)n(l)t(l)30 b(splay)h(tr)l(e)l(e)e(op)l(er)l(ations)i(have)g
(amortize)l(d)f(c)l(ost)g Fh(O)r Fk(\(log)15 b Fh(n)p
Fk(\))p Fe(.)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
